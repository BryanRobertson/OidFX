#define YY_CHAR char
#line 1 "c:\\Documents and Settings\\Bryan\\My Documents\\PerforceWorkspace\\OidFX\\Tools\\flex++bison++\\flexskel.cc"
/* A lexical scanner generated by flex */
/* scanner skeleton version:
 * $Header: c:\\Program\040Files\\Development\\CVS\040Repository/flex++/flexskel.cc,v 1.1.1.1 2002/04/13 06:01:32 Bear Exp $
 */
/* MODIFIED FOR C++ CLASS BY Alain Coetmeur: coetmeur(at)icdc.fr */
/* Note that (at) mean the 'at' symbol that I cannot write */
/* because it is expanded to the class name */
/* made at Informatique-CDC, Research&development department */
/* company from the Caisse Des Depots et Consignations */
/* institutional financial group  */

/* theses symbols are added before this file */
/* #define YY_CHAR 'unsigned char' if 8bit or 'char' if 7bit */
/* #define FLEX_DEBUG if debug mode */
#define FLEX_SCANNER
/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif
/* Old MSC, before c7 */
#ifdef WIN32
#ifndef _MSDOS
#define _MSDOS
#endif
#endif
/* turboc */
#ifdef __MSDOS__
#ifndef _MSDOS
#define _MSDOS
#endif
#endif

#ifdef __cplusplus
#include <stdlib.h>
#define YY_USE_CONST
#define YY_USE_PROTOS
#ifndef YY_USE_CLASS
#define YY_USE_CLASS
#endif
#ifndef _MSDOS
#include <osfcn.h>
#endif
#else   /* ! __cplusplus */
#ifdef __STDC__
#ifdef __GNUC__
#include <stddef.h>
void *malloc( size_t );
void free( void* );
int read();
#else
#include <stdlib.h>
#endif  /* __GNUC__ */
#define YY_USE_PROTOS
#define YY_USE_CONST
#endif  /* __STDC__ */
#endif  /* ! __cplusplus */
#ifdef __TURBOC__
#define YY_USE_CONST
#endif
#include <stdio.h>


/*********************************************/
/* COMPILER DEPENDENT   MACROS               */
/*********************************************/
/* use prototypes in function declarations */
/* the "const" storage-class-modifier is valid */
#ifndef YY_USE_CONST
#define const
#endif
/* use prototypes in function declarations */
#ifndef YY_PROTO
#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif
#endif


/*********************/
/* parameters        */

/* amount of stuff to slurp up with each read */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif
/* size of default input buffer */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE (YY_READ_BUF_SIZE * 2) 
#endif

/***********************************/
/* to be redefined for application */

/* returned upon end-of-file */
#define YY_END_TOK 0
/* no semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#define yyterminate() return ( YY_NULL )

/* code executed at the end of each rule */
#define YY_BREAK break;

/* #define YY_USER_ACTION */
/* #define YY_USER_INIT */


#ifndef YY_USE_CLASS
/* copy whatever the last rule matched to the standard output */
/* cast to (char *) is because for 8-bit chars, yy___text is (unsigned char *) */
/* this used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite()
 */
#define ECHO (void) fwrite( (char *) yy___text, yy___leng, 1, yy___out )

/* gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifdef _MSDOS
#define YY_INPUT(buf,result,max_size) \
	if ( (result = fread(buf,1,max_size,yy___in)) < 0 ) \
	    YY_FATAL_ERROR( "fread() in flex scanner failed" );
#else
#define YY_INPUT(buf,result,max_size) \
	if ( (result = read( fileno(yy___in), (char *) buf, max_size )) < 0 ) \
	    YY_FATAL_ERROR( "read() in flex scanner failed" );

#endif
/* report a fatal error */

/* The funky do-while is used to turn this macro definition into
 * a single C statement (which needs a semi-colon terminator).
 * This avoids problems with code like:
 *
 *      if ( something_happens )
 *              YY_FATAL_ERROR( "oops, the something happened" );
 *      else
 *              everything_okay();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the YY_FATAL_ERROR() call.
 */

#define YY_FATAL_ERROR(msg) \
	do \
		{ \
		(void) fputs( msg, yy___stderr  ); \
		(void) putc( '\n', yy___stderr  ); \
		exit( 1 ); \
		} \
	while ( 0 )

/* default yywrap function - always treat EOF as an EOF */
#define yywrap() 1


/* default declaration of generated scanner - a define so the user can
 * easily add parameters
 */
#define YY_DECL int yylex YY_PROTO(( void )) 
#else 
/* c++ */
#define ECHO yy___echo()
#define YY_INPUT(buf,result,max_size) \
	if ( yy___input((char *)buf, result,max_size) < 0 ) \
	    YY_FATAL_ERROR( "YY_INPUT() in flex scanner failed" );

#define YY_FATAL_ERROR(msg) yy___fatal_error(msg)
#define yywrap() yy___wrap()

#endif
/***********************************/
/* not to be changed */
#define YY_NULL 0
#define YY_END_OF_BUFFER_CHAR 0
/* special action meaning "start processing a new file" */
#define YY_NEW_FILE yy___newfile 
/* enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN
 */
#define BEGIN yy_start = 1 + 2 *

/* action number for EOF rule of a given start state */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)



/* % section 1 definitions go here */ 
#line 1 "c:\\Documents and Settings\\Bryan\\My Documents\\PerforceWorkspace\\OidFX\\Source\\Renderer\\Grammar\\EffectLexer.l"
#define INITIAL 0
#define YY_EffectLexer_FLEX_SCANNER
#line 30 "c:\\Documents and Settings\\Bryan\\My Documents\\PerforceWorkspace\\OidFX\\Source\\Renderer\\Grammar\\EffectLexer.l"

/* ------------------------------------------------------------------
   Initial code (copied verbatim to the output file)
   ------------------------------------------------------------------ */
  using namespace std;   
 
  
#include "c:\Documents and Settings\Bryan\My Documents\PerforceWorkspace\OidFX\Source\Renderer\Grammar/EffectLexer.h"
#line 47 "c:\\Documents and Settings\\Bryan\\My Documents\\PerforceWorkspace\\OidFX\\Source\\Renderer\\Grammar\\EffectLexer.l"
#line 196 "c:\\Documents and Settings\\Bryan\\My Documents\\PerforceWorkspace\\OidFX\\Tools\\flex++bison++\\flexskel.cc"

#define yy___stderr YY_EffectLexer_ERRFILE
#define yy___text YY_EffectLexer_TEXT
#define yy___leng YY_EffectLexer_LENG
#define yy___in YY_EffectLexer_IN
#define yy___out YY_EffectLexer_OUT
#define yy___newfile \
	do \
		{ \
		YY_EffectLexer_INIT_BUFFER( YY_EffectLexer_CURRENT_BUFFER, yy___in ); \
		YY_EffectLexer_LOAD_BUFFER_STATE(); \
		} \
	while ( 0 )
#if YY_EffectLexer_DEBUG != 0
#define yy___flex_debug YY_EffectLexer_DEBUG_FLAG
#endif


#ifdef YY_USE_CLASS

#define yy___echo YY_EffectLexer_ECHO
#define yy___input YY_EffectLexer_INPUT
#define yy___fatal_error YY_EffectLexer_FATAL_ERROR
#define yy___wrap YY_EffectLexer_WRAP

#endif

/* done after the current pattern has been matched and before the
 * corresponding action - sets up yy___text
 */
#define YY_DO_BEFORE_ACTION \
	yy___text = yy_bp; \
/* % code to fiddle yy___text and yy___leng for yymore() goes here */ \
	yy___leng = yy_cp - yy_bp; \
	yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yy_c_buf_p = yy_cp;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* return all but the first 'n' matched characters back to the input stream */
#define yyless(n) \
	do \
		{ \
		/* undo effects of setting up yy___text */ \
		*yy_cp = yy_hold_char; \
		yy_c_buf_p = yy_cp = yy_bp + n; \
		YY_DO_BEFORE_ACTION; /* set up yy___text again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yy___text )



struct yy_buffer_state
    {
    YY_EffectLexer_IFILE  *yy_input_file;

    YY_EffectLexer_CHAR *yy_ch_buf;               /* input buffer */
    YY_EffectLexer_CHAR *yy_buf_pos;      /* current position in input buffer */

    /* size of input buffer in bytes, not including room for EOB characters */
    int yy_buf_size;    

    /* number of characters read into yy_ch_buf, not including EOB characters */
    int yy_n_chars;

    int yy_eof_status;          /* whether we've seen an EOF on this buffer */
#define EOF_NOT_SEEN 0
    /* "pending" happens when the EOF has been seen but there's still
     * some text process
     */
#define EOF_PENDING 1
#define EOF_DONE 2
    };

/* we provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state"
 */

#ifndef YY_USE_CLASS

#if YY_EffectLexer_DEBUG != 0
int YY_EffectLexer_DEBUG_FLAG=YY_EffectLexer_DEBUG_INIT;
#endif
#define YY_CURRENT_BUFFER YY_EffectLexer_CURRENT_BUFFER
static YY_BUFFER_STATE YY_EffectLexer_CURRENT_BUFFER;
/* yy_hold_char holds the character lost when yy___text is formed */
static YY_EffectLexer_CHAR yy_hold_char;

static int yy_n_chars;          /* number of characters read into yy_ch_buf */

/* GLOBAL */
YY_EffectLexer_CHAR *yy___text;
int yy___leng;

YY_EffectLexer_IFILE  *yy___in = (YY_EffectLexer_IFILE  *) 0;
YY_EffectLexer_OFILE *yy___out = (YY_EffectLexer_OFILE  *) 0;

#ifdef __cplusplus
static int yyinput YY_PROTO(( void ));
#else
static int input YY_PROTO(( void ));
#endif
/* these variables are all declared out here so that section 3 code can
 * manipulate them
 */
/* points to current character in buffer */
static YY_EffectLexer_CHAR *yy_c_buf_p = (YY_EffectLexer_CHAR *) 0;
static int yy_init = 1;         /* whether we need to initialize */
static int yy_start = 0;        /* start state number */

/* flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yy___in.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

static int yy_get_next_buffer YY_PROTO(( void ));
static void yyunput YY_PROTO(( YY_EffectLexer_CHAR c, YY_EffectLexer_CHAR *buf_ptr ));

#else
/* c++ */
#ifndef YY_EffectLexer_ECHO_NOCODE
void YY_EffectLexer_CLASS::yy___echo()
{YY_EffectLexer_ECHO_CODE
}
#endif
#ifndef YY_EffectLexer_INPUT_NOCODE
int  YY_EffectLexer_CLASS::yy___input(char * buffer,int &result,int max_size)
{YY_EffectLexer_INPUT_CODE
}
#endif
#ifndef YY_EffectLexer_FATAL_ERROR_NOCODE
void YY_EffectLexer_CLASS::yy___fatal_error(char *msg)
{YY_EffectLexer_FATAL_ERROR_CODE
}
#endif
#ifndef YY_EffectLexer_WRAP_NOCODE
int  YY_EffectLexer_CLASS::yy___wrap()
{YY_EffectLexer_WRAP_CODE
}
#endif
void YY_EffectLexer_CLASS::yy_initialize()
{
 yy___in=0;yy___out=0;yy_init = 1;
 yy_start=0;
 yy___text=0;yy___leng=0;
 YY_EffectLexer_CURRENT_BUFFER=0;
 yy_did_buffer_switch_on_eof=0;
 yy_c_buf_p=0;yy_hold_char=0;yy_n_chars=0;
#if YY_EffectLexer_DEBUG != 0
 YY_EffectLexer_DEBUG_FLAG=YY_EffectLexer_DEBUG_INIT;
#endif
}

YY_EffectLexer_CLASS::YY_EffectLexer_CLASS(YY_EffectLexer_CONSTRUCTOR_PARAM) YY_EffectLexer_CONSTRUCTOR_INIT
{yy_initialize();
 YY_EffectLexer_CONSTRUCTOR_CODE;
}
YY_EffectLexer_CLASS::~YY_EffectLexer_CLASS() 
{YY_EffectLexer_DESTRUCTOR_CODE;
 if(YY_EffectLexer_CURRENT_BUFFER)
  YY_EffectLexer_DELETE_BUFFER(YY_EffectLexer_CURRENT_BUFFER);
}

#endif


#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

#ifndef YY_USER_INIT
#define YY_USER_INIT
#endif

/* % data tables for the DFA go here */ 
#define YY_END_OF_BUFFER 179
typedef int yy_state_type;
static const short int yy_accept[1063] =
    {   0,
        0,    0,  179,  176,  174,  175,  176,  176,  168,  176,
      176,  172,  172,  172,  176,  176,  176,  176,  176,  176,
      176,  176,  176,  176,  176,  176,  176,  176,  176,  176,
      176,  176,  176,  176,  176,  166,  167,  174,  175,    0,
      171,  172,    0,    0,   66,   67,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  173,  172,
       92,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   60,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  144,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      137,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   35,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   61,    0,    0,    0,   42,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   34,
        0,    0,    0,    0,    0,   29,    0,  106,  160,    0,

        0,    0,    0,    0,    0,    0,    0,    0,   59,    0,
        0,    0,   52,    0,    0,   10,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  129,    0,    0,    0,   50,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    6,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       71,    0,    0,  145,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       72,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  162,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  159,    0,    0,    0,    0,   48,    0,  136,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  119,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  158,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   75,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    1,    0,    0,    0,
        0,   58,    0,    0,    0,    0,  164,    0,    0,    0,
        0,    0,    0,   33,    0,    0,  161,   62,    0,    0,
       73,    0,    0,    0,    0,    8,    0,    0,    0,    0,
        0,  126,    0,  118,    0,    0,    0,    0,    0,    0,
        0,  130,    0,    0,    0,    0,    0,  117,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   85,
        0,   11,    0,    0,    0,    0,    0,    0,    0,    0,
       18,    0,    0,    0,    0,   68,  107,    0,    0,    0,

        0,    0,   32,    0,    0,  109,    0,   86,    0,    0,
        0,    0,    0,   12,  169,    0,    0,    0,    0,    0,
        0,    0,   54,    0,   43,  165,   31,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   30,    0,    0,    0,  127,  128,
        0,    0,    7,    0,    0,    0,    0,    0,    0,    0,
        0,   41,    0,    0,    0,  108,    0,    0,    0,    0,
        0,   64,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   80,    0,    0,    0,    0,
        0,    0,    0,  111,    0,    0,   84,    0,    0,    0,

        0,    0,    0,  170,    0,    0,    0,    0,    0,    0,
       15,    0,    0,    0,    0,   57,    0,    0,    0,    0,
        0,    0,    0,    0,    3,   40,    0,   89,    0,    0,
        0,  163,    0,    0,    0,    0,    0,  131,  124,  125,
        0,  110,    0,  148,    0,   94,    0,    0,    0,    0,
       13,    0,    0,    0,    0,    0,    0,    0,  133,    0,
        0,    0,    0,    0,  134,    0,    0,    0,   93,   95,
        0,    0,    0,   36,  139,    0,    0,    0,    0,    0,
        0,   39,    0,    0,    0,    0,    0,    0,  151,    0,
        0,    0,   22,   21,   19,    0,    0,   79,   56,    0,

        0,  138,    0,    0,    0,    0,    0,    0,   47,    0,
        0,    0,    0,    0,    0,    0,   46,    0,    0,    0,
        0,    0,    0,  114,    0,  146,  122,    0,    0,   14,
        0,    0,    0,    0,    0,    0,    0,   81,    2,    0,
        0,    0,    0,  123,  135,    0,  143,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  153,    0,    0,   20,    0,    0,   55,    0,    0,
        0,    0,    0,    0,    0,   74,   90,   91,    0,    0,
        0,    0,    0,    0,    0,    0,  121,   87,   88,    0,
       17,  120,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,   82,    0,    0,    0,    0,  155,
        0,    0,  142,    0,    5,   44,    0,   37,   49,  104,
        0,    0,   53,    0,    0,    0,    0,  149,    0,    0,
        0,  105,    0,    0,    0,  101,    0,  150,   27,   25,
       26,   23,    0,    0,    9,  113,   69,   63,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  152,    0,    0,  147,    0,    0,    0,    0,
       51,    0,    0,   28,   16,   76,   77,   78,    0,   65,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      154,    0,    0,    0,   83,    0,    0,    0,   70,    0,

        0,    0,    0,    0,    0,  112,    0,    0,  156,    0,
        0,    0,    0,    4,    0,    0,    0,    0,    0,  157,
        0,  116,    0,    0,    0,    0,    0,    0,    0,    0,
       98,    0,   38,    0,  132,    0,    0,   45,   24,  100,
       96,   97,    0,    0,    0,    0,    0,    0,    0,   99,
      115,    0,    0,    0,    0,    0,    0,    0,    0,  102,
      103,    0
    } ;

static const YY_CHAR yy_ec[128] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    5,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    6,    7,    8,    9,   10,   11,   12,
       13,   14,   10,   10,   10,   10,   10,    1,    1,    1,
        1,    1,    1,    1,   15,   16,   17,   18,   19,   20,
       21,   22,   23,    1,   24,   25,   26,   27,   28,   29,
       30,   31,   32,   33,   34,   35,   36,   37,   38,   39,
        1,    1,    1,    1,   40,    1,   41,   42,   43,   44,

       45,   46,   47,   48,   49,    1,   50,   51,   52,   53,
       54,   55,   56,   57,   58,   59,   60,   61,   62,   63,
       64,    1,   65,    1,   66,    1,    1
    } ;

static const YY_CHAR yy_meta[67] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1
    } ;

static const short int yy_base[1065] =
    {   0,
        0,    0, 1130, 1131, 1127, 1131, 1125, 1122, 1131,   57,
     1117,   64,   71,   80,   77,   82,   72,   89,  109,   62,
       96,   59, 1106,  121,  107,  103, 1097,  123,  124,  164,
      131, 1104,   68, 1102, 1102, 1131, 1131, 1118, 1131, 1114,
     1131,  189, 1115,  203, 1131, 1131, 1099,   44, 1093, 1071,
     1059,   59, 1054, 1087, 1092,  125, 1052, 1064,  138,  138,
      129, 1050,  122, 1056,  142,  160, 1073, 1050, 1058, 1088,
     1068, 1072, 1081, 1053, 1049, 1082, 1045, 1048, 1049, 1063,
     1058, 1072,  150, 1045, 1070,  174, 1061, 1069, 1039, 1054,
     1066, 1058, 1019, 1046,  193, 1023,  165, 1056, 1059, 1019,

     1035, 1046, 1041, 1030, 1013, 1035,  194, 1045, 1042, 1030,
      208, 1033, 1049, 1049,  187,  180, 1007, 1018, 1017, 1024,
      216,  147, 1029, 1044,  997, 1003, 1025, 1052, 1131,  235,
      202, 1032, 1038, 1020,  994, 1002, 1000,  997,  993, 1023,
     1018, 1026, 1021,  997,  988, 1014, 1022, 1010, 1005, 1009,
     1016, 1003,  974,  978,  973,  979,  998,  995, 1007, 1007,
     1010,  995,  964,  976, 1005, 1005, 1007,  986,  972,  958,
      982,  955,  223,  957,  978,  980,  995,  978,  234,  951,
      978,  972,  976,  972,  984,  977,  953,  969,  965,  965,
      171,  978,  977,  969,  975,  941,  973, 1131,  964,  964,

      931,  930,  962,  971,  940,  943,  950,  957,  953,  961,
      960,  960,  960,  957,  942,  959,  220,  940,  921,  918,
      916,  925,  915,  908,  923,  912,  931,  936,  239,  914,
      221,  928,  931,  914,  901,  929,  937,  185,  940,  916,
      925,  907,  910,  905,  900,  927,  920,  928,  926,  921,
     1131,  899,  913,  917,  906,  906,  905,  911,  917,  903,
      874,  874,  883,  899,  242,  896,  912,  912,  896,  878,
      865,  899,  898, 1131,  893,  878,  862, 1131,  874,  864,
      872,  863,  854,  855,  849,  852,  896,  895,  876,  876,
      882,  887,  874,  873,  862, 1131,  887, 1131, 1131,  886,

      855,  840,  870,  872,  873,  842,  845,  862, 1131,  877,
      861,  849,  860,  855,  859, 1131,  841,  870,  851,  834,
      823,  853,  861,  854,  861, 1131,  849,  842,  844, 1131,
      843,  848,  844,  840,  825,  824,  817,  818,  817, 1131,
      805,  821,  829,  830,  834,  837,  806,  804,  797,  837,
     1131,  225,  803, 1131,  822,  832,  824,  835,  818,  816,
      790,   92,  794,  787,  800,  825,  243,  812,  815,  813,
     1131,  804,  808,  823,  818,  821,  808,  786,  776,  791,
      778,  815,  804,  800,  795,  793,  800,  796,  249,  765,
      803, 1131,  806,  761,  770,  761,  766,  763,  771,  769,

      772,  757,  766,  785,  775,  789,  792,  787,  773,  235,
      787,  744,  777,  770,  739,  750,  767,  782,  767,  746,
      747, 1131,  768,  758,  740,  771, 1131,  771, 1131,  771,
      768,  725,  740,  756,  743,  757,  748,  754,  754,  759,
      758,  747,  750,  759,  758,  756,  720,  717,  716,  717,
      718,  735,  736,  743,  736,  713,  707,  703,  722,  694,
      737,  723,  723,  727,  725,  727, 1131,  720,  692,  694,
      703,  688,  686,  692,  729,  709,  719,  726,  721, 1131,
      704,  683,  714,  720,  708,  703,  704,  699,  690,  242,
      677,  682,  695,  698,  701,  706,  701,  704,  704,  672,

      660,  674,  661,  672,  698,  698, 1131,  653,  664,  658,
      653, 1131,  653,  652,  663,  654, 1131,  688,  674,  671,
      676,  669,  682, 1131,  256,  651, 1131, 1131,  654,  645,
      669,  663,  670,  636,  645, 1131,  677,  642,  659,  655,
      669, 1131,  642,  671,  652,  237,  644,  668,  663,  666,
      654, 1131,  657,  650,  660,  623,  624,  659,  626,  627,
      630,  619,  650,  653,  642,  647,  609,  607,  618,  645,
      606,  606,  595,  632,  638,  623,  636,  626,  604, 1131,
      594, 1131,  607,  605,  618,  617,  627,  629,  608,  612,
     1131,  611,  617,  608,  623, 1131, 1131,  595,  583,  580,

      577,  609, 1131,  612,  605, 1131,  604,   78,   69,  101,
      115,  119,  140, 1131, 1131,  203,  198,  219,  217,  230,
      224,  224, 1131,  241, 1131, 1131, 1131,  268,  272,  248,
      265,  263,  238,  242,  247,  268,  277,  259,  244,  240,
      275,  243,  277,  278, 1131,  272,  252,  284, 1131, 1131,
      270,  278, 1131,  279,  296,  297,  279,  281,  266,  271,
      264, 1131,  260,  262,  300, 1131,  290,  303,  308,  264,
      281,  293,  300,  285,  274,  277,  306,  317,  315,  311,
      311,  288,  283,  298,  287, 1131,  314,  326,  314,  315,
      318,  331,  332, 1131,  327,  299, 1131,  305,  338,  302,

      342,  324,  332, 1131,  343,  303,  319,  304,  305,  325,
     1131,  319,  310,  309,  320, 1131,  306,  351,  347,  345,
      342,  346,  351,  324, 1131, 1131,  361,  367,  365,  324,
      327, 1131,  341,  364,  373,  341,  341, 1131, 1131, 1131,
      370, 1131,  363,  361,  363, 1131,  343,  343,  348,  340,
     1131,  358,  359,  360,  357,  346,  384,  386, 1131,  375,
      362,  387,  356,  385, 1131,  359,  367,  395, 1131, 1131,
      396,  392,  369, 1131, 1131,  376,  399,  386,  393,  388,
      406, 1131,  397,  397,  364,  368,  374,  385, 1131,  399,
      416,  399, 1131, 1131, 1131,  388,  407, 1131, 1131,  371,

      392, 1131,  422,  410,  415,  426,  420,  415, 1131,  425,
      408,  409,  422,  420,  431,  393, 1131,  424,  431,  420,
      413,  403,  445, 1131,  443, 1131, 1131,  415,  408, 1131,
      412,  404,  405,  406,  416,  425,  440, 1131, 1131,  423,
      424,  421,  443, 1131, 1131,  453, 1131,  456,  448,  416,
      449,  445,  447,  448,  465,  463,  465,  425,  439,  434,
      441, 1131,  462,  475, 1131,  461,  471, 1131,  446,  475,
      471,  466,  459,  481,  463, 1131, 1131, 1131,  469,  474,
      482,  447,  448,  481,  485,  461, 1131, 1131, 1131,  473,
     1131, 1131,  456,  458,  451,  451,  452,  463,  480,  461,

      456,  457,  483,  478, 1131,  465,  475,  488,  503,  508,
      505,  500, 1131,  502, 1131, 1131,  473, 1131, 1131, 1131,
      497,  509, 1131,  497,  516,  498,  500, 1131,  503,  513,
      508, 1131,  482,  481,  506, 1131,  486, 1131, 1131, 1131,
     1131, 1131,  496,  491, 1131, 1131, 1131, 1131,  512,  510,
      503,  504,  534,  535,  526,  537,  524,  518,  495,  530,
      532,  530, 1131,  528,  532, 1131,  546,  528,  499,  512,
     1131,  503,  540, 1131, 1131, 1131, 1131, 1131,  522, 1131,
      543,  544,  541,  546,  550,  550,  517,  560,  557,  546,
     1131,  550,  539,  549, 1131,  540,  524,  542, 1131,  555,

      556,  564,  558,  573,  557, 1131,  565,  574, 1131,  559,
      578,  554,  544, 1131,  538,  575,  576,  584,  578, 1131,
      582, 1131,  569,  581,  586,  590,  548,  557,  593,  594,
     1131,  595, 1131,  588, 1131,  594,  595, 1131, 1131, 1131,
     1131,  585,  587,  599,  599,  592,  592,  592,  606, 1131,
     1131,  597,  598,  596,  596,  592,  605,  597,  614, 1131,
     1131, 1131,  629,  630
    } ;

static const short int yy_def[1065] =
    {   0,
     1062,    1, 1062, 1062, 1062, 1062, 1062, 1063, 1062, 1062,
     1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062,
     1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062,
     1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1063,
     1062, 1062, 1064, 1062, 1062, 1062, 1062, 1062, 1062, 1062,
     1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062,
     1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062,
     1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062,
     1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062,
     1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062,

     1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062,
     1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062,
     1062, 1062, 1062, 1062, 1062, 1062, 1062, 1064, 1062, 1062,
     1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062,
     1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062,
     1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062,
     1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062,
     1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062,
     1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062,
     1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062,

     1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062,
     1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062,
     1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062,
     1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062,
     1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062,
     1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062,
     1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062,
     1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062,
     1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062,
     1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062,

     1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062,
     1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062,
     1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062,
     1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062,
     1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062,
     1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062,
     1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062,
     1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062,
     1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062,
     1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062,

     1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062,
     1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062,
     1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062,
     1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062,
     1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062,
     1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062,
     1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062,
     1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062,
     1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062,
     1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062,

     1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062,
     1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062,
     1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062,
     1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062,
     1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062,
     1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062,
     1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062,
     1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062,
     1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062,
     1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062,

     1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062,
     1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062,
     1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062,
     1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062,
     1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062,
     1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062,
     1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062,
     1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062,
     1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062,
     1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062,

     1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062,
     1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062,
     1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062,
     1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062,
     1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062,
     1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062,
     1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062,
     1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062,
     1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062,
     1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062,

     1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062,
     1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062,
     1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062,
     1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062,
     1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062,
     1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062,
     1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062,
     1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062,
     1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062,
     1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062,

     1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062,
     1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062,
     1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062,
     1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062,
     1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062,
     1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062,
     1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062,
     1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062,
     1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062,
     1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062,

     1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062,
     1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062,
     1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062,
     1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062,
     1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062,
     1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062,
     1062,    0, 1062, 1062
    } ;

static const short int yy_nxt[1198] =
    {   0,
        4,    5,    6,    7,    8,    9,   10,    4,   11,   12,
       13,   14,   12,   12,   15,   16,   17,   18,   19,   20,
       21,    4,   22,   23,   24,   25,   26,   27,   28,    4,
       29,   30,   31,    4,   32,   33,   34,    4,   35,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,   36,   37,   42,   42,   42,   42,
       42,   44,  132,   42,   42,   42,   42,   42,   44,  133,
       42,   42,   42,   42,   42,   83,   76,   44,   45,   42,
       42,   42,   42,   42,   47,  704,   59,   46,  124,   60,

      137,   48,  705,   49,   54,   61,   55,   65,  125,   56,
       77,   66,   62,  138,   80,   78,   67,   84,   79,  470,
       50,   94,   57,   81,  471,   63,   82,   51,   52,   90,
       95,   64,   58,   68,   91,   70,   53,   69,   71,   86,
       92,  706,  102,   87,  151,   72,   73,   93,   88,  120,
       98,  103,  146,   99,   74,  142,   96,  143,  157,  152,
       75,  121,  148,  100,  149,  147,  178,  707,  104,   89,
      101,  150,  154,  158,  155,  122,  708,  105,  106,  159,
      107,  197,  108,  198,  179,  306,  109,  110,  709,  230,
      160,  161,  111,  112,  113,  307,   44,  114,   42,   42,

       42,   42,   42,  182,  183,  184,  115,  356,  208,  231,
      357,  116,  130,  130,  130,  130,  130,  117,  118,  193,
      222,  710,  119,  194,  209,  195,  213,  219,  223,  214,
      228,  220,  237,  238,  332,  215,  333,  348,  229,  280,
      281,  282,  711,  221,  130,  130,  130,  130,  130,  291,
      283,  292,  293,  345,  284,  285,  383,  460,  384,  476,
      477,  461,  478,  346,  500,  294,  523,  524,  501,  599,
      631,  712,  632,  649,  650,  479,  713,  600,  714,  349,
      715,  502,  716,  717,  503,  718,  719,  721,  720,  722,
      723,  724,  725,  726,  727,  728,  729,  730,  731,  732,

      733,  734,  735,  736,  737,  738,  739,  740,  741,  742,
      743,  744,  745,  746,  747,  748,  749,  750,  751,  752,
      758,  759,  760,  761,  762,  753,  763,  764,  754,  765,
      766,  767,  755,  768,  769,  756,  770,  771,  757,  772,
      773,  774,  775,  776,  777,  778,  779,  780,  781,  782,
      783,  784,  785,  786,  787,  788,  789,  790,  791,  792,
      793,  794,  795,  796,  797,  798,  799,  800,  801,  802,
      803,  804,  805,  806,  807,  808,  809,  810,  811,  815,
      812,  813,  816,  814,  817,  818,  819,  820,  821,  822,
      823,  824,  825,  826,  827,  828,  829,  830,  831,  832,

      833,  834,  835,  836,  837,  838,  839,  840,  842,  843,
      844,  845,  846,  847,  848,  849,  850,  851,  841,  852,
      853,  854,  855,  856,  857,  858,  859,  860,  861,  862,
      863,  864,  865,  866,  868,  869,  870,  867,  871,  872,
      873,  874,  875,  876,  877,  878,  879,  880,  881,  882,
      883,  884,  885,  886,  887,  888,  889,  890,  891,  892,
      893,  894,  895,  896,  897,  898,  899,  900,  901,  902,
      903,  904,  905,  906,  907,  908,  909,  910,  911,  912,
      913,  914,  915,  916,  917,  918,  919,  920,  921,  922,
      923,  924,  925,  926,  927,  928,  929,  930,  931,  932,

      933,  934,  935,  936,  937,  938,  939,  940,  941,  942,
      943,  944,  945,  946,  947,  948,  949,  950,  951,  952,
      953,  954,  955,  956,  957,  958,  959,  960,  961,  962,
      963,  964,  965,  966,  967,  968,  969,  970,  971,  972,
      973,  974,  975,  976,  977,  978,  979,  980,  981,  982,
      983,  984,  985,  986,  987,  988,  989,  990,  991,  992,
      993,  994,  995,  996,  997,  998,  999, 1000, 1001, 1002,
     1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012,
     1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022,
     1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032,

     1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042,
     1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052,
     1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061,   40,
      128,  703,  702,  701,  700,  699,  698,  697,  696,  695,
      694,  693,  692,  691,  690,  689,  688,  687,  686,  685,
      684,  683,  682,  681,  680,  679,  678,  677,  676,  675,
      674,  673,  672,  671,  670,  669,  668,  667,  666,  665,
      664,  663,  662,  661,  660,  659,  658,  657,  656,  655,
      654,  653,  652,  651,  648,  647,  646,  645,  644,  643,
      642,  641,  640,  639,  638,  637,  636,  635,  634,  633,

      630,  629,  628,  627,  626,  625,  624,  623,  622,  621,
      620,  619,  618,  617,  616,  615,  614,  613,  612,  611,
      610,  609,  608,  607,  606,  605,  604,  603,  602,  601,
      598,  597,  596,  595,  594,  593,  592,  591,  590,  589,
      588,  587,  586,  585,  584,  583,  582,  581,  580,  579,
      578,  577,  576,  575,  574,  573,  572,  571,  570,  569,
      568,  567,  566,  565,  564,  563,  562,  561,  560,  559,
      558,  557,  556,  555,  554,  553,  552,  551,  550,  549,
      548,  547,  546,  545,  544,  543,  542,  541,  540,  539,
      538,  537,  536,  535,  534,  533,  532,  531,  530,  529,

      528,  527,  526,  525,  522,  521,  520,  519,  518,  517,
      516,  515,  514,  513,  512,  511,  510,  509,  508,  507,
      506,  505,  504,  499,  498,  497,  496,  495,  494,  493,
      492,  491,  490,  489,  488,  487,  486,  485,  484,  483,
      482,  481,  480,  475,  474,  473,  472,  469,  468,  467,
      466,  465,  464,  463,  462,  459,  458,  457,  456,  455,
      454,  453,  452,  451,  450,  449,  448,  447,  446,  445,
      444,  443,  442,  441,  440,  439,  438,  437,  436,  435,
      434,  433,  432,  431,  430,  429,  428,  427,  426,  425,
      424,  423,  422,  421,  420,  419,  418,  417,  416,  415,

      414,  413,  412,  411,  410,  409,  408,  407,  406,  405,
      404,  403,  402,  401,  400,  399,  398,  397,  396,  395,
      394,  393,  392,  391,  390,  389,  388,  387,  386,  385,
      382,  381,  380,  379,  378,  377,  376,  375,  374,  373,
      372,  371,  370,  369,  368,  367,  366,  365,  364,  363,
      362,  361,  360,  359,  358,  355,  354,  353,  352,  351,
      350,  347,  344,  343,  342,  341,  340,  339,  338,  337,
      336,  335,  334,  331,  330,  329,  328,  327,  326,  325,
      324,  323,  322,  321,  320,  319,  318,  317,  316,  315,
      314,  313,  312,  311,  310,  309,  308,  305,  304,  303,

      302,  301,  300,  299,  298,  297,  296,  295,  290,  289,
      288,  287,  286,  279,  278,  277,  276,  275,  274,  273,
      272,  271,  270,  269,  268,  267,  266,  265,  264,  263,
      262,  261,  260,  259,  258,  257,  256,  255,  254,  253,
      252,  251,  250,  249,  248,  247,  246,  245,  244,  243,
      242,  241,  240,  239,  129,  236,  235,  234,  233,  232,
      227,  226,  225,  224,  218,  217,  216,  212,  211,  210,
      207,  206,  205,  204,  203,  202,  201,  200,  199,  196,
      192,  191,  190,  189,  188,  187,  186,  185,  181,  180,
      177,  176,  175,  174,  173,  172,  171,  170,  169,  168,

      167,  166,  165,  164,  163,  162,  156,  153,  145,  144,
      141,  140,  139,  136,  135,  134,  131,  129,   41,   38,
      127,  126,  123,   97,   85,   43,   41,   39,   38, 1062,
        3, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062,
     1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062,
     1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062,
     1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062,
     1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062,
     1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062,
     1062, 1062, 1062, 1062, 1062, 1062, 1062

    } ;

static const short int yy_chk[1198] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,   10,   10,   10,   10,
       10,   12,   48,   12,   12,   12,   12,   12,   13,   48,
       13,   13,   13,   13,   13,   22,   20,   14,   13,   14,
       14,   14,   14,   14,   15,  608,   17,   14,   33,   17,

       52,   15,  609,   15,   16,   17,   16,   18,   33,   16,
       20,   18,   17,   52,   21,   20,   18,   22,   20,  362,
       15,   26,   16,   21,  362,   17,   21,   15,   15,   25,
       26,   17,   16,   18,   25,   19,   15,   18,   19,   24,
       25,  610,   29,   24,   61,   19,   19,   25,   24,   31,
       28,   29,   59,   28,   19,   56,   26,   56,   65,   61,
       19,   31,   60,   28,   60,   59,   83,  611,   29,   24,
       28,   60,   63,   65,   63,   31,  612,   29,   30,   66,
       30,   97,   30,   97,   83,  191,   30,   30,  613,  122,
       66,   66,   30,   30,   30,  191,   42,   30,   42,   42,

       42,   42,   42,   86,   86,   86,   30,  238,  107,  122,
      238,   30,   44,   44,   44,   44,   44,   30,   30,   95,
      116,  616,   30,   95,  107,   95,  111,  115,  116,  111,
      121,  115,  131,  131,  217,  111,  217,  231,  121,  173,
      173,  173,  617,  115,  130,  130,  130,  130,  130,  179,
      173,  179,  179,  229,  173,  173,  265,  352,  265,  367,
      367,  352,  367,  229,  389,  179,  410,  410,  389,  490,
      525,  618,  525,  546,  546,  367,  619,  490,  620,  231,
      621,  389,  622,  624,  389,  628,  629,  630,  629,  631,
      632,  633,  634,  635,  636,  637,  638,  639,  640,  641,

      642,  643,  644,  646,  647,  648,  651,  651,  652,  654,
      655,  656,  657,  658,  659,  660,  661,  663,  664,  665,
      667,  668,  669,  670,  671,  665,  672,  673,  665,  674,
      675,  676,  665,  677,  678,  665,  679,  680,  665,  681,
      682,  683,  684,  685,  687,  688,  689,  690,  691,  692,
      693,  695,  696,  698,  699,  700,  701,  702,  703,  705,
      706,  707,  708,  709,  710,  712,  713,  714,  715,  717,
      718,  719,  720,  721,  722,  723,  724,  727,  728,  729,
      728,  728,  730,  728,  731,  733,  734,  735,  736,  737,
      741,  743,  744,  745,  747,  748,  749,  750,  752,  753,

      754,  755,  756,  757,  758,  760,  761,  762,  763,  764,
      766,  767,  768,  771,  772,  773,  776,  777,  762,  778,
      779,  780,  781,  783,  784,  785,  786,  787,  788,  790,
      791,  792,  796,  797,  800,  801,  803,  797,  804,  805,
      806,  807,  808,  810,  811,  812,  813,  814,  815,  816,
      818,  819,  820,  821,  822,  823,  823,  825,  828,  829,
      831,  832,  833,  834,  835,  836,  837,  840,  841,  842,
      843,  846,  848,  849,  850,  851,  852,  853,  854,  855,
      856,  857,  858,  859,  860,  861,  863,  864,  866,  867,
      869,  870,  871,  872,  873,  874,  875,  879,  880,  881,

      882,  883,  884,  885,  886,  890,  893,  894,  895,  896,
      897,  898,  899,  900,  901,  902,  903,  904,  906,  907,
      908,  909,  910,  911,  912,  914,  917,  921,  922,  924,
      925,  926,  927,  929,  930,  931,  933,  934,  935,  937,
      943,  944,  949,  950,  950,  950,  951,  952,  953,  954,
      955,  956,  957,  958,  959,  960,  961,  962,  964,  965,
      967,  968,  969,  970,  972,  973,  979,  981,  982,  983,
      984,  985,  986,  987,  988,  989,  990,  992,  993,  994,
      996,  997,  998, 1000, 1001, 1002, 1003, 1004, 1005, 1007,
     1008, 1010, 1011, 1012, 1013, 1015, 1016, 1017, 1018, 1019,

     1021, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1032,
     1034, 1036, 1037, 1042, 1043, 1044, 1045, 1046, 1047, 1048,
     1049, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1063,
     1064,  607,  605,  604,  602,  601,  600,  599,  598,  595,
      594,  593,  592,  590,  589,  588,  587,  586,  585,  584,
      583,  581,  579,  578,  577,  576,  575,  574,  573,  572,
      571,  570,  569,  568,  567,  566,  565,  564,  563,  562,
      561,  560,  559,  558,  557,  556,  555,  554,  553,  551,
      550,  549,  548,  547,  545,  544,  543,  541,  540,  539,
      538,  537,  535,  534,  533,  532,  531,  530,  529,  526,

      523,  522,  521,  520,  519,  518,  516,  515,  514,  513,
      511,  510,  509,  508,  506,  505,  504,  503,  502,  501,
      500,  499,  498,  497,  496,  495,  494,  493,  492,  491,
      489,  488,  487,  486,  485,  484,  483,  482,  481,  479,
      478,  477,  476,  475,  474,  473,  472,  471,  470,  469,
      468,  466,  465,  464,  463,  462,  461,  460,  459,  458,
      457,  456,  455,  454,  453,  452,  451,  450,  449,  448,
      447,  446,  445,  444,  443,  442,  441,  440,  439,  438,
      437,  436,  435,  434,  433,  432,  431,  430,  428,  426,
      425,  424,  423,  421,  420,  419,  418,  417,  416,  415,

      414,  413,  412,  411,  409,  408,  407,  406,  405,  404,
      403,  402,  401,  400,  399,  398,  397,  396,  395,  394,
      393,  391,  390,  388,  387,  386,  385,  384,  383,  382,
      381,  380,  379,  378,  377,  376,  375,  374,  373,  372,
      370,  369,  368,  366,  365,  364,  363,  361,  360,  359,
      358,  357,  356,  355,  353,  350,  349,  348,  347,  346,
      345,  344,  343,  342,  341,  339,  338,  337,  336,  335,
      334,  333,  332,  331,  329,  328,  327,  325,  324,  323,
      322,  321,  320,  319,  318,  317,  315,  314,  313,  312,
      311,  310,  308,  307,  306,  305,  304,  303,  302,  301,

      300,  297,  295,  294,  293,  292,  291,  290,  289,  288,
      287,  286,  285,  284,  283,  282,  281,  280,  279,  277,
      276,  275,  273,  272,  271,  270,  269,  268,  267,  266,
      264,  263,  262,  261,  260,  259,  258,  257,  256,  255,
      254,  253,  252,  250,  249,  248,  247,  246,  245,  244,
      243,  242,  241,  240,  239,  237,  236,  235,  234,  233,
      232,  230,  228,  227,  226,  225,  224,  223,  222,  221,
      220,  219,  218,  216,  215,  214,  213,  212,  211,  210,
      209,  208,  207,  206,  205,  204,  203,  202,  201,  200,
      199,  197,  196,  195,  194,  193,  192,  190,  189,  188,

      187,  186,  185,  184,  183,  182,  181,  180,  178,  177,
      176,  175,  174,  172,  171,  170,  169,  168,  167,  166,
      165,  164,  163,  162,  161,  160,  159,  158,  157,  156,
      155,  154,  153,  152,  151,  150,  149,  148,  147,  146,
      145,  144,  143,  142,  141,  140,  139,  138,  137,  136,
      135,  134,  133,  132,  128,  127,  126,  125,  124,  123,
      120,  119,  118,  117,  114,  113,  112,  110,  109,  108,
      106,  105,  104,  103,  102,  101,  100,   99,   98,   96,
       94,   93,   92,   91,   90,   89,   88,   87,   85,   84,
       82,   81,   80,   79,   78,   77,   76,   75,   74,   73,

       72,   71,   70,   69,   68,   67,   64,   62,   58,   57,
       55,   54,   53,   51,   50,   49,   47,   43,   40,   38,
       35,   34,   32,   27,   23,   11,    8,    7,    5,    3,
     1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062,
     1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062,
     1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062,
     1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062,
     1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062,
     1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062,
     1062, 1062, 1062, 1062, 1062, 1062, 1062

    } ;

static yy_state_type yy_last_accepting_state;
static YY_CHAR *yy_last_accepting_cpos;

#if YY_EffectLexer_DEBUG != 0
static const short int yy_rule_linenum[178] =
    {   0,
       49,   50,   51,   52,   53,   54,   55,   56,   57,   58,
       60,   61,   62,   63,   64,   65,   67,   68,   70,   71,
       72,   73,   75,   76,   77,   78,   79,   80,   82,   83,
       84,   85,   86,   87,   88,   90,   92,   93,   94,   96,
       98,   99,  100,  102,  104,  106,  107,  108,  109,  110,
      111,  112,  114,  115,  116,  117,  118,  119,  121,  122,
      123,  124,  126,  127,  128,  129,  130,  131,  132,  133,
      134,  135,  136,  137,  138,  139,  140,  141,  142,  143,
      144,  145,  146,  147,  148,  149,  150,  151,  152,  153,
      154,  155,  156,  157,  158,  159,  160,  161,  162,  163,

      164,  165,  166,  167,  168,  169,  170,  171,  172,  173,
      174,  175,  176,  177,  178,  179,  180,  181,  182,  183,
      184,  185,  187,  188,  189,  190,  191,  192,  193,  194,
      195,  196,  197,  198,  199,  200,  201,  202,  203,  206,
      207,  208,  209,  210,  211,  212,  213,  214,  215,  216,
      217,  218,  219,  220,  221,  222,  223,  225,  226,  227,
      228,  229,  230,  231,  232,  234,  235,  236,  237,  238,
      240,  247,  255,  256,  257,  262,  262
    } ;

#endif
/* the intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#line 376 "c:\\Documents and Settings\\Bryan\\My Documents\\PerforceWorkspace\\OidFX\\Tools\\flex++bison++\\flexskel.cc"
#ifndef YY_USE_CLASS
static yy_state_type yy_get_previous_state YY_PROTO(( void ));
static yy_state_type yy_try_NUL_trans YY_PROTO(( yy_state_type current_state ));
#else
#define yy_get_previous_state() ((yy_state_type)(yy_get_previous_state_()))
#define yy_try_NUL_trans(c) ((yy_state_type)(yy_try_NUL_trans_(c)))
#endif

#ifndef YY_USE_CLASS
#ifdef YY_EffectLexer_LEX_DEFINED
YY_EffectLexer_LEX_RETURN YY_EffectLexer_LEX ( YY_EffectLexer_LEX_PARAM )
YY_EffectLexer_LEX_PARAM_DEF
#else
YY_DECL
#endif
#else
YY_EffectLexer_LEX_RETURN YY_EffectLexer_CLASS::YY_EffectLexer_LEX ( YY_EffectLexer_LEX_PARAM)

#endif
    {
    register yy_state_type yy_current_state;
    register YY_EffectLexer_CHAR *yy_cp, *yy_bp;
    register int yy_act;

/* % user's declarations go here */ 


/* % end of prolog */ 
#line 401 "c:\\Documents and Settings\\Bryan\\My Documents\\PerforceWorkspace\\OidFX\\Tools\\flex++bison++\\flexskel.cc"

    if ( yy_init )
	{
	 
	 {
	 YY_USER_INIT;
	 }
	if ( ! yy_start )
	    yy_start = 1;       /* first start state */

	if ( ! yy___in )
	    yy___in = YY_EffectLexer_IFILE_DEFAULT;

	if ( ! yy___out )
	    yy___out = YY_EffectLexer_OFILE_DEFAULT;

	if ( YY_EffectLexer_CURRENT_BUFFER )
	    YY_EffectLexer_INIT_BUFFER( YY_EffectLexer_CURRENT_BUFFER, yy___in );
	else
	    YY_EffectLexer_CURRENT_BUFFER = YY_EffectLexer_CREATE_BUFFER( yy___in, YY_BUF_SIZE );

	YY_EffectLexer_LOAD_BUFFER_STATE();
	yy_init=0;
	}

    while ( 1 )         /* loops until end-of-file is reached */
	{
/* % yymore()-related code goes here */ 
#line 429 "c:\\Documents and Settings\\Bryan\\My Documents\\PerforceWorkspace\\OidFX\\Tools\\flex++bison++\\flexskel.cc"
	yy_cp = yy_c_buf_p;

	/* support of yy___text */
	*yy_cp = yy_hold_char;

	/* yy_bp points to the position in yy_ch_buf of the start of the
	 * current run.
	 */
	yy_bp = yy_cp;

/* % code to set up and find next match goes here */ 
	yy_current_state = yy_start;
yy_match:
	do
	    {
	    register YY_CHAR yy_c = yy_ec[*yy_cp];
	    if ( yy_accept[yy_current_state] )
		{
		yy_last_accepting_state = yy_current_state;
		yy_last_accepting_cpos = yy_cp;
		}
	    while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = yy_def[yy_current_state];
		if ( yy_current_state >= 1063 )
		    yy_c = yy_meta[yy_c];
		}
	    yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	    ++yy_cp;
	    }
	while ( yy_current_state != 1062 );
	yy_cp = yy_last_accepting_cpos;
	yy_current_state = yy_last_accepting_state;
#line 440 "c:\\Documents and Settings\\Bryan\\My Documents\\PerforceWorkspace\\OidFX\\Tools\\flex++bison++\\flexskel.cc"

yy_find_action:
/* % code to find the action number goes here */ 
	yy_act = yy_accept[yy_current_state];
#line 443 "c:\\Documents and Settings\\Bryan\\My Documents\\PerforceWorkspace\\OidFX\\Tools\\flex++bison++\\flexskel.cc"

	YY_DO_BEFORE_ACTION;
	YY_USER_ACTION;

do_action:      /* this label is used only to access EOF actions */
#if YY_EffectLexer_DEBUG != 0
	if ( yy___flex_debug )
		{
		if ( yy_act == 0 )
#ifndef YY_EffectLexer_IOSTREAM
			fprintf( yy___stderr , "--scanner backtracking\n" );
#else
			yy___stderr <<"--scanner backtracking"<<endl;
#endif
		else if ( yy_act < YY_END_OF_BUFFER -1 )
#ifndef YY_EffectLexer_IOSTREAM
			fprintf( yy___stderr , 
			 "--accepting rule at line %d (\"%s\")\n",
			 yy_rule_linenum[yy_act], yy___text );
#else
			yy___stderr <<"--accepting rule at line "
                          <<(int)yy_rule_linenum[yy_act]
                          <<" (\""<<(char *)yy___text<<"\")"<<endl;
#endif
		else if ( yy_act == YY_END_OF_BUFFER -1 )
#ifndef YY_EffectLexer_IOSTREAM
			fprintf( yy___stderr , 
			 "--accepting default rule (\"%s\")\n",
			 yy___text );
#else
			yy___stderr <<"--accepting default rule"
                          <<" (\""<<(char *)yy___text<<"\")"<<endl;
#endif
		else if ( yy_act == YY_END_OF_BUFFER )
#ifndef YY_EffectLexer_IOSTREAM
			fprintf( yy___stderr , "--(end of buffer or a NUL)\n" );
#else
			yy___stderr <<"--(end of buffer or a NUL)"<<endl;
#endif
		else
#ifndef YY_EffectLexer_IOSTREAM
			fprintf( yy___stderr , "--EOF\n" );
#else
			yy___stderr <<"--EOF"<<endl;
#endif
		}
#endif
	switch ( yy_act )
	    {
/* % actions go here */ 
	    case 0: /* must backtrack */
	    /* undo the effects of YY_DO_BEFORE_ACTION */
	    *yy_cp = yy_hold_char;
	    yy_cp = yy_last_accepting_cpos;
	    yy_current_state = yy_last_accepting_state;
	    goto yy_find_action;

case 1:
#line 49 "c:\\Documents and Settings\\Bryan\\My Documents\\PerforceWorkspace\\OidFX\\Source\\Renderer\\Grammar\\EffectLexer.l"
{ m_column += strlen(yytext);	return EffectParserBase::TOKEN_EFFECT;				}
	YY_BREAK
case 2:
#line 50 "c:\\Documents and Settings\\Bryan\\My Documents\\PerforceWorkspace\\OidFX\\Source\\Renderer\\Grammar\\EffectLexer.l"
{ m_column += strlen(yytext);	return EffectParserBase::TOKEN_TECHNIQUE;			}
	YY_BREAK
case 3:
#line 51 "c:\\Documents and Settings\\Bryan\\My Documents\\PerforceWorkspace\\OidFX\\Source\\Renderer\\Grammar\\EffectLexer.l"
{ m_column += strlen(yytext);	return EffectParserBase::TOKEN_LODLEVEL;			}
	YY_BREAK
case 4:
#line 52 "c:\\Documents and Settings\\Bryan\\My Documents\\PerforceWorkspace\\OidFX\\Source\\Renderer\\Grammar\\EffectLexer.l"
{ m_column += strlen(yytext);	return EffectParserBase::TOKEN_RECEIVESHADOWS;		}
	YY_BREAK
case 5:
#line 53 "c:\\Documents and Settings\\Bryan\\My Documents\\PerforceWorkspace\\OidFX\\Source\\Renderer\\Grammar\\EffectLexer.l"
{ m_column += strlen(yytext);	return EffectParserBase::TOKEN_CASTSHADOWS;			}
	YY_BREAK
case 6:
#line 54 "c:\\Documents and Settings\\Bryan\\My Documents\\PerforceWorkspace\\OidFX\\Source\\Renderer\\Grammar\\EffectLexer.l"
{ m_column += strlen(yytext);	return EffectParserBase::TOKEN_SORT;				}
	YY_BREAK
case 7:
#line 55 "c:\\Documents and Settings\\Bryan\\My Documents\\PerforceWorkspace\\OidFX\\Source\\Renderer\\Grammar\\EffectLexer.l"
{ m_column += strlen(yytext);	return EffectParserBase::TOKEN_SKYDOME;				}
	YY_BREAK
case 8:
#line 56 "c:\\Documents and Settings\\Bryan\\My Documents\\PerforceWorkspace\\OidFX\\Source\\Renderer\\Grammar\\EffectLexer.l"
{ m_column += strlen(yytext);	return EffectParserBase::TOKEN_NORMAL;				}
	YY_BREAK
case 9:
#line 57 "c:\\Documents and Settings\\Bryan\\My Documents\\PerforceWorkspace\\OidFX\\Source\\Renderer\\Grammar\\EffectLexer.l"
{ m_column += strlen(yytext);	return EffectParserBase::TOKEN_TRANSPARENT;			}
	YY_BREAK
case 10:
#line 58 "c:\\Documents and Settings\\Bryan\\My Documents\\PerforceWorkspace\\OidFX\\Source\\Renderer\\Grammar\\EffectLexer.l"
{ m_column += strlen(yytext);	return EffectParserBase::TOKEN_PASS;				}
	YY_BREAK
case 11:
#line 60 "c:\\Documents and Settings\\Bryan\\My Documents\\PerforceWorkspace\\OidFX\\Source\\Renderer\\Grammar\\EffectLexer.l"
{ m_column += strlen(yytext);	return EffectParserBase::TOKEN_AMBIENT;				}
	YY_BREAK
case 12:
#line 61 "c:\\Documents and Settings\\Bryan\\My Documents\\PerforceWorkspace\\OidFX\\Source\\Renderer\\Grammar\\EffectLexer.l"
{ m_column += strlen(yytext);	return EffectParserBase::TOKEN_DIFFUSE;				}
	YY_BREAK
case 13:
#line 62 "c:\\Documents and Settings\\Bryan\\My Documents\\PerforceWorkspace\\OidFX\\Source\\Renderer\\Grammar\\EffectLexer.l"
{ m_column += strlen(yytext);	return EffectParserBase::TOKEN_SPECULAR;			}
	YY_BREAK
case 14:
#line 63 "c:\\Documents and Settings\\Bryan\\My Documents\\PerforceWorkspace\\OidFX\\Source\\Renderer\\Grammar\\EffectLexer.l"
{ m_column += strlen(yytext);	return EffectParserBase::TOKEN_SHININESS;			}
	YY_BREAK
case 15:
#line 64 "c:\\Documents and Settings\\Bryan\\My Documents\\PerforceWorkspace\\OidFX\\Source\\Renderer\\Grammar\\EffectLexer.l"
{ m_column += strlen(yytext);	return EffectParserBase::TOKEN_EMISSIVE;			}
	YY_BREAK
case 16:
#line 65 "c:\\Documents and Settings\\Bryan\\My Documents\\PerforceWorkspace\\OidFX\\Source\\Renderer\\Grammar\\EffectLexer.l"
{ m_column += strlen(yytext);	return EffectParserBase::TOKEN_VERTEXCOLOUR;		}
	YY_BREAK
case 17:
#line 67 "c:\\Documents and Settings\\Bryan\\My Documents\\PerforceWorkspace\\OidFX\\Source\\Renderer\\Grammar\\EffectLexer.l"
{ m_column += strlen(yytext);	return EffectParserBase::TOKEN_SCENEBLEND;			}
	YY_BREAK
case 18:
#line 68 "c:\\Documents and Settings\\Bryan\\My Documents\\PerforceWorkspace\\OidFX\\Source\\Renderer\\Grammar\\EffectLexer.l"
{ m_column += strlen(yytext);	return EffectParserBase::TOKEN_BLENDOP;				}
	YY_BREAK
case 19:
#line 70 "c:\\Documents and Settings\\Bryan\\My Documents\\PerforceWorkspace\\OidFX\\Source\\Renderer\\Grammar\\EffectLexer.l"
{ m_column += strlen(yytext);	return EffectParserBase::TOKEN_DEPTHTEST;					}
	YY_BREAK
case 20:
#line 71 "c:\\Documents and Settings\\Bryan\\My Documents\\PerforceWorkspace\\OidFX\\Source\\Renderer\\Grammar\\EffectLexer.l"
{ m_column += strlen(yytext);	return EffectParserBase::TOKEN_DEPTHWRITE;					}
	YY_BREAK
case 21:
#line 72 "c:\\Documents and Settings\\Bryan\\My Documents\\PerforceWorkspace\\OidFX\\Source\\Renderer\\Grammar\\EffectLexer.l"
{ m_column += strlen(yytext);	return EffectParserBase::TOKEN_DEPTHFUNC;					}
	YY_BREAK
case 22:
#line 73 "c:\\Documents and Settings\\Bryan\\My Documents\\PerforceWorkspace\\OidFX\\Source\\Renderer\\Grammar\\EffectLexer.l"
{ m_column += strlen(yytext);	return EffectParserBase::TOKEN_DEPTHBIAS;					}
	YY_BREAK
case 23:
#line 75 "c:\\Documents and Settings\\Bryan\\My Documents\\PerforceWorkspace\\OidFX\\Source\\Renderer\\Grammar\\EffectLexer.l"
{ m_column += strlen(yytext);	return EffectParserBase::TOKEN_STENCILTEST;					}
	YY_BREAK
case 24:
#line 76 "c:\\Documents and Settings\\Bryan\\My Documents\\PerforceWorkspace\\OidFX\\Source\\Renderer\\Grammar\\EffectLexer.l"
{ m_column += strlen(yytext);	return EffectParserBase::TOKEN_STENCILWRITEMASK;			}
	YY_BREAK
case 25:
#line 77 "c:\\Documents and Settings\\Bryan\\My Documents\\PerforceWorkspace\\OidFX\\Source\\Renderer\\Grammar\\EffectLexer.l"
{ m_column += strlen(yytext);	return EffectParserBase::TOKEN_STENCILMASK;					}
	YY_BREAK
case 26:
#line 78 "c:\\Documents and Settings\\Bryan\\My Documents\\PerforceWorkspace\\OidFX\\Source\\Renderer\\Grammar\\EffectLexer.l"
{ m_column += strlen(yytext);	return EffectParserBase::TOKEN_STENCILPASS;					}
	YY_BREAK
case 27:
#line 79 "c:\\Documents and Settings\\Bryan\\My Documents\\PerforceWorkspace\\OidFX\\Source\\Renderer\\Grammar\\EffectLexer.l"
{ m_column += strlen(yytext);	return EffectParserBase::TOKEN_STENCILFAIL;					}
	YY_BREAK
case 28:
#line 80 "c:\\Documents and Settings\\Bryan\\My Documents\\PerforceWorkspace\\OidFX\\Source\\Renderer\\Grammar\\EffectLexer.l"
{ m_column += strlen(yytext);	return EffectParserBase::TOKEN_STENCILZFAIL;				}
	YY_BREAK
case 29:
#line 82 "c:\\Documents and Settings\\Bryan\\My Documents\\PerforceWorkspace\\OidFX\\Source\\Renderer\\Grammar\\EffectLexer.l"
{ m_column += strlen(yytext);	return EffectParserBase::TOKEN_KEEP;						}
	YY_BREAK
case 30:
#line 83 "c:\\Documents and Settings\\Bryan\\My Documents\\PerforceWorkspace\\OidFX\\Source\\Renderer\\Grammar\\EffectLexer.l"
{ m_column += strlen(yytext);	return EffectParserBase::TOKEN_REPLACE;						}
	YY_BREAK
case 31:
#line 84 "c:\\Documents and Settings\\Bryan\\My Documents\\PerforceWorkspace\\OidFX\\Source\\Renderer\\Grammar\\EffectLexer.l"
{ m_column += strlen(yytext);	return EffectParserBase::TOKEN_INCRSAT;						}
	YY_BREAK
case 32:
#line 85 "c:\\Documents and Settings\\Bryan\\My Documents\\PerforceWorkspace\\OidFX\\Source\\Renderer\\Grammar\\EffectLexer.l"
{ m_column += strlen(yytext);	return EffectParserBase::TOKEN_DECRSAT;						}
	YY_BREAK
case 33:
#line 86 "c:\\Documents and Settings\\Bryan\\My Documents\\PerforceWorkspace\\OidFX\\Source\\Renderer\\Grammar\\EffectLexer.l"
{ m_column += strlen(yytext);	return EffectParserBase::TOKEN_INVERT;						}
	YY_BREAK
case 34:
#line 87 "c:\\Documents and Settings\\Bryan\\My Documents\\PerforceWorkspace\\OidFX\\Source\\Renderer\\Grammar\\EffectLexer.l"
{ m_column += strlen(yytext);	return EffectParserBase::TOKEN_INCR;						}
	YY_BREAK
case 35:
#line 88 "c:\\Documents and Settings\\Bryan\\My Documents\\PerforceWorkspace\\OidFX\\Source\\Renderer\\Grammar\\EffectLexer.l"
{ m_column += strlen(yytext);	return EffectParserBase::TOKEN_DECR;						}
	YY_BREAK
case 36:
#line 90 "c:\\Documents and Settings\\Bryan\\My Documents\\PerforceWorkspace\\OidFX\\Source\\Renderer\\Grammar\\EffectLexer.l"
{ m_column += strlen(yytext);	return EffectParserBase::TOKEN_ALPHATEST;					}
	YY_BREAK
case 37:
#line 92 "c:\\Documents and Settings\\Bryan\\My Documents\\PerforceWorkspace\\OidFX\\Source\\Renderer\\Grammar\\EffectLexer.l"
{ m_column += strlen(yytext);	return EffectParserBase::TOKEN_CULLINGMODE;					}
	YY_BREAK
case 38:
#line 93 "c:\\Documents and Settings\\Bryan\\My Documents\\PerforceWorkspace\\OidFX\\Source\\Renderer\\Grammar\\EffectLexer.l"
{ m_column += strlen(yytext);	return EffectParserBase::TOKEN_COUNTERCLOCKWISE;			}
	YY_BREAK
case 39:
#line 94 "c:\\Documents and Settings\\Bryan\\My Documents\\PerforceWorkspace\\OidFX\\Source\\Renderer\\Grammar\\EffectLexer.l"
{ m_column += strlen(yytext);	return EffectParserBase::TOKEN_CLOCKWISE;					}
	YY_BREAK
case 40:
#line 96 "c:\\Documents and Settings\\Bryan\\My Documents\\PerforceWorkspace\\OidFX\\Source\\Renderer\\Grammar\\EffectLexer.l"
{ m_column += strlen(yytext);	return EffectParserBase::TOKEN_LIGHTING;					}
	YY_BREAK
case 41:
#line 98 "c:\\Documents and Settings\\Bryan\\My Documents\\PerforceWorkspace\\OidFX\\Source\\Renderer\\Grammar\\EffectLexer.l"
{ m_column += strlen(yytext);	return EffectParserBase::TOKEN_SHADING;						}
	YY_BREAK
case 42:
#line 99 "c:\\Documents and Settings\\Bryan\\My Documents\\PerforceWorkspace\\OidFX\\Source\\Renderer\\Grammar\\EffectLexer.l"
{ m_column += strlen(yytext);	return EffectParserBase::TOKEN_FLAT;						}
	YY_BREAK
case 43:
#line 100 "c:\\Documents and Settings\\Bryan\\My Documents\\PerforceWorkspace\\OidFX\\Source\\Renderer\\Grammar\\EffectLexer.l"
{ m_column += strlen(yytext);	return EffectParserBase::TOKEN_GOURAUD;						}
	YY_BREAK
case 44:
#line 102 "c:\\Documents and Settings\\Bryan\\My Documents\\PerforceWorkspace\\OidFX\\Source\\Renderer\\Grammar\\EffectLexer.l"
{ m_column += strlen(yytext);	return EffectParserBase::TOKEN_COLOURWRITE;					}
	YY_BREAK
case 45:
#line 104 "c:\\Documents and Settings\\Bryan\\My Documents\\PerforceWorkspace\\OidFX\\Source\\Renderer\\Grammar\\EffectLexer.l"
{ m_column += strlen(yytext);	return EffectParserBase::TOKEN_NORMALISENORMALS;			}
	YY_BREAK
case 46:
#line 106 "c:\\Documents and Settings\\Bryan\\My Documents\\PerforceWorkspace\\OidFX\\Source\\Renderer\\Grammar\\EffectLexer.l"
{ m_column += strlen(yytext);	return EffectParserBase::TOKEN_MAXLIGHTS;					}
	YY_BREAK
case 47:
#line 107 "c:\\Documents and Settings\\Bryan\\My Documents\\PerforceWorkspace\\OidFX\\Source\\Renderer\\Grammar\\EffectLexer.l"
{ m_column += strlen(yytext);	return EffectParserBase::TOKEN_ITERATION;					}
	YY_BREAK
case 48:
#line 108 "c:\\Documents and Settings\\Bryan\\My Documents\\PerforceWorkspace\\OidFX\\Source\\Renderer\\Grammar\\EffectLexer.l"
{ m_column += strlen(yytext);	return EffectParserBase::TOKEN_POINT;						}
	YY_BREAK
case 49:
#line 109 "c:\\Documents and Settings\\Bryan\\My Documents\\PerforceWorkspace\\OidFX\\Source\\Renderer\\Grammar\\EffectLexer.l"
{ m_column += strlen(yytext);	return EffectParserBase::TOKEN_DIRECTIONAL;					}
	YY_BREAK
case 50:
#line 110 "c:\\Documents and Settings\\Bryan\\My Documents\\PerforceWorkspace\\OidFX\\Source\\Renderer\\Grammar\\EffectLexer.l"
{ m_column += strlen(yytext);	return EffectParserBase::TOKEN_SPOT;						}
	YY_BREAK
case 51:
#line 111 "c:\\Documents and Settings\\Bryan\\My Documents\\PerforceWorkspace\\OidFX\\Source\\Renderer\\Grammar\\EffectLexer.l"
{ m_column += strlen(yytext);	return EffectParserBase::TOKEN_ONCEPERLIGHT;				}
	YY_BREAK
case 52:
#line 112 "c:\\Documents and Settings\\Bryan\\My Documents\\PerforceWorkspace\\OidFX\\Source\\Renderer\\Grammar\\EffectLexer.l"
{ m_column += strlen(yytext);	return EffectParserBase::TOKEN_ONCE;						}
	YY_BREAK
case 53:
#line 114 "c:\\Documents and Settings\\Bryan\\My Documents\\PerforceWorkspace\\OidFX\\Source\\Renderer\\Grammar\\EffectLexer.l"
{ m_column += strlen(yytext);	return EffectParserBase::TOKEN_FOGOVERRIDE;				}
	YY_BREAK
case 54:
#line 115 "c:\\Documents and Settings\\Bryan\\My Documents\\PerforceWorkspace\\OidFX\\Source\\Renderer\\Grammar\\EffectLexer.l"
{ m_column += strlen(yytext);	return EffectParserBase::TOKEN_FOGTYPE;					}
	YY_BREAK
case 55:
#line 116 "c:\\Documents and Settings\\Bryan\\My Documents\\PerforceWorkspace\\OidFX\\Source\\Renderer\\Grammar\\EffectLexer.l"
{ m_column += strlen(yytext);	return EffectParserBase::TOKEN_FOGDENSITY;				}
	YY_BREAK
case 56:
#line 117 "c:\\Documents and Settings\\Bryan\\My Documents\\PerforceWorkspace\\OidFX\\Source\\Renderer\\Grammar\\EffectLexer.l"
{ m_column += strlen(yytext);	return EffectParserBase::TOKEN_FOGCOLOUR;				}
	YY_BREAK
case 57:
#line 118 "c:\\Documents and Settings\\Bryan\\My Documents\\PerforceWorkspace\\OidFX\\Source\\Renderer\\Grammar\\EffectLexer.l"
{ m_column += strlen(yytext);	return EffectParserBase::TOKEN_FOGSTART;				}
	YY_BREAK
case 58:
#line 119 "c:\\Documents and Settings\\Bryan\\My Documents\\PerforceWorkspace\\OidFX\\Source\\Renderer\\Grammar\\EffectLexer.l"
{ m_column += strlen(yytext);	return EffectParserBase::TOKEN_FOGEND;					}
	YY_BREAK
case 59:
#line 121 "c:\\Documents and Settings\\Bryan\\My Documents\\PerforceWorkspace\\OidFX\\Source\\Renderer\\Grammar\\EffectLexer.l"
{ m_column += strlen(yytext);	return EffectParserBase::TOKEN_NONE;					}
	YY_BREAK
case 60:
#line 122 "c:\\Documents and Settings\\Bryan\\My Documents\\PerforceWorkspace\\OidFX\\Source\\Renderer\\Grammar\\EffectLexer.l"
{ m_column += strlen(yytext);	return EffectParserBase::TOKEN_EXP;						}
	YY_BREAK
case 61:
#line 123 "c:\\Documents and Settings\\Bryan\\My Documents\\PerforceWorkspace\\OidFX\\Source\\Renderer\\Grammar\\EffectLexer.l"
{ m_column += strlen(yytext);	return EffectParserBase::TOKEN_EXP2;					}
	YY_BREAK
case 62:
#line 124 "c:\\Documents and Settings\\Bryan\\My Documents\\PerforceWorkspace\\OidFX\\Source\\Renderer\\Grammar\\EffectLexer.l"
{ m_column += strlen(yytext);	return EffectParserBase::TOKEN_LINEAR;					}
	YY_BREAK
case 63:
#line 126 "c:\\Documents and Settings\\Bryan\\My Documents\\PerforceWorkspace\\OidFX\\Source\\Renderer\\Grammar\\EffectLexer.l"
{ m_column += strlen(yytext);	return EffectParserBase::TOKEN_TEXTUREUNIT;				}
	YY_BREAK
case 64:
#line 127 "c:\\Documents and Settings\\Bryan\\My Documents\\PerforceWorkspace\\OidFX\\Source\\Renderer\\Grammar\\EffectLexer.l"
{ m_column += strlen(yytext);	return EffectParserBase::TOKEN_TEXTURE;					}
	YY_BREAK
case 65:
#line 128 "c:\\Documents and Settings\\Bryan\\My Documents\\PerforceWorkspace\\OidFX\\Source\\Renderer\\Grammar\\EffectLexer.l"
{ m_column += strlen(yytext);	return EffectParserBase::TOKEN_AUTOGENERATED;			}
	YY_BREAK
case 66:
#line 129 "c:\\Documents and Settings\\Bryan\\My Documents\\PerforceWorkspace\\OidFX\\Source\\Renderer\\Grammar\\EffectLexer.l"
{ m_column += strlen(yytext);	return EffectParserBase::TOKEN_1D;						}
	YY_BREAK
case 67:
#line 130 "c:\\Documents and Settings\\Bryan\\My Documents\\PerforceWorkspace\\OidFX\\Source\\Renderer\\Grammar\\EffectLexer.l"
{ m_column += strlen(yytext);	return EffectParserBase::TOKEN_2D;						}
	YY_BREAK
case 68:
#line 131 "c:\\Documents and Settings\\Bryan\\My Documents\\PerforceWorkspace\\OidFX\\Source\\Renderer\\Grammar\\EffectLexer.l"
{ m_column += strlen(yytext);	return EffectParserBase::TOKEN_CUBEMAP;					}
	YY_BREAK
case 69:
#line 132 "c:\\Documents and Settings\\Bryan\\My Documents\\PerforceWorkspace\\OidFX\\Source\\Renderer\\Grammar\\EffectLexer.l"
{ m_column += strlen(yytext);	return EffectParserBase::TOKEN_TEXCOORDSET;				}
	YY_BREAK
case 70:
#line 133 "c:\\Documents and Settings\\Bryan\\My Documents\\PerforceWorkspace\\OidFX\\Source\\Renderer\\Grammar\\EffectLexer.l"
{ m_column += strlen(yytext);	return EffectParserBase::TOKEN_ADDRESSINGMODE;			}
	YY_BREAK
case 71:
#line 134 "c:\\Documents and Settings\\Bryan\\My Documents\\PerforceWorkspace\\OidFX\\Source\\Renderer\\Grammar\\EffectLexer.l"
{ m_column += strlen(yytext);	return EffectParserBase::TOKEN_WRAP;					}
	YY_BREAK
case 72:
#line 135 "c:\\Documents and Settings\\Bryan\\My Documents\\PerforceWorkspace\\OidFX\\Source\\Renderer\\Grammar\\EffectLexer.l"
{ m_column += strlen(yytext);	return EffectParserBase::TOKEN_CLAMP;					}
	YY_BREAK
case 73:
#line 136 "c:\\Documents and Settings\\Bryan\\My Documents\\PerforceWorkspace\\OidFX\\Source\\Renderer\\Grammar\\EffectLexer.l"
{ m_column += strlen(yytext);	return EffectParserBase::TOKEN_MIRROR;					}
	YY_BREAK
case 74:
#line 137 "c:\\Documents and Settings\\Bryan\\My Documents\\PerforceWorkspace\\OidFX\\Source\\Renderer\\Grammar\\EffectLexer.l"
{ m_column += strlen(yytext);	return EffectParserBase::TOKEN_MIRRORONCE;				}
	YY_BREAK
case 75:
#line 138 "c:\\Documents and Settings\\Bryan\\My Documents\\PerforceWorkspace\\OidFX\\Source\\Renderer\\Grammar\\EffectLexer.l"
{ m_column += strlen(yytext);	return EffectParserBase::TOKEN_BORDER;					}
	YY_BREAK
case 76:
#line 139 "c:\\Documents and Settings\\Bryan\\My Documents\\PerforceWorkspace\\OidFX\\Source\\Renderer\\Grammar\\EffectLexer.l"
{ m_column += strlen(yytext);	return EffectParserBase::TOKEN_ADDRESSMODE_U;			}
	YY_BREAK
case 77:
#line 140 "c:\\Documents and Settings\\Bryan\\My Documents\\PerforceWorkspace\\OidFX\\Source\\Renderer\\Grammar\\EffectLexer.l"
{ m_column += strlen(yytext);	return EffectParserBase::TOKEN_ADDRESSMODE_V;			}
	YY_BREAK
case 78:
#line 141 "c:\\Documents and Settings\\Bryan\\My Documents\\PerforceWorkspace\\OidFX\\Source\\Renderer\\Grammar\\EffectLexer.l"
{ m_column += strlen(yytext);	return EffectParserBase::TOKEN_ADDRESSMODE_W;			}
	YY_BREAK
case 79:
#line 142 "c:\\Documents and Settings\\Bryan\\My Documents\\PerforceWorkspace\\OidFX\\Source\\Renderer\\Grammar\\EffectLexer.l"
{ m_column += strlen(yytext);	return EffectParserBase::TOKEN_FILTERING;				}
	YY_BREAK
case 80:
#line 143 "c:\\Documents and Settings\\Bryan\\My Documents\\PerforceWorkspace\\OidFX\\Source\\Renderer\\Grammar\\EffectLexer.l"
{ m_column += strlen(yytext);	return EffectParserBase::TOKEN_BILINEAR;				}
	YY_BREAK
case 81:
#line 144 "c:\\Documents and Settings\\Bryan\\My Documents\\PerforceWorkspace\\OidFX\\Source\\Renderer\\Grammar\\EffectLexer.l"
{ m_column += strlen(yytext);	return EffectParserBase::TOKEN_TRILINEAR;				}
	YY_BREAK
case 82:
#line 145 "c:\\Documents and Settings\\Bryan\\My Documents\\PerforceWorkspace\\OidFX\\Source\\Renderer\\Grammar\\EffectLexer.l"
{ m_column += strlen(yytext);	return EffectParserBase::TOKEN_ANISOTROPIC;				}
	YY_BREAK
case 83:
#line 146 "c:\\Documents and Settings\\Bryan\\My Documents\\PerforceWorkspace\\OidFX\\Source\\Renderer\\Grammar\\EffectLexer.l"
{ m_column += strlen(yytext);	return EffectParserBase::TOKEN_MAXANISOTROPY;			}
	YY_BREAK
case 84:
#line 147 "c:\\Documents and Settings\\Bryan\\My Documents\\PerforceWorkspace\\OidFX\\Source\\Renderer\\Grammar\\EffectLexer.l"
{ m_column += strlen(yytext);	return EffectParserBase::TOKEN_COLOUROP;				}
	YY_BREAK
case 85:
#line 148 "c:\\Documents and Settings\\Bryan\\My Documents\\PerforceWorkspace\\OidFX\\Source\\Renderer\\Grammar\\EffectLexer.l"
{ m_column += strlen(yytext);	return EffectParserBase::TOKEN_ALPHAOP;					}
	YY_BREAK
case 86:
#line 149 "c:\\Documents and Settings\\Bryan\\My Documents\\PerforceWorkspace\\OidFX\\Source\\Renderer\\Grammar\\EffectLexer.l"
{ m_column += strlen(yytext);	return EffectParserBase::TOKEN_DISABLE;					}
	YY_BREAK
case 87:
#line 150 "c:\\Documents and Settings\\Bryan\\My Documents\\PerforceWorkspace\\OidFX\\Source\\Renderer\\Grammar\\EffectLexer.l"
{ m_column += strlen(yytext);	return EffectParserBase::TOKEN_SELECTARG1;				}
	YY_BREAK
case 88:
#line 151 "c:\\Documents and Settings\\Bryan\\My Documents\\PerforceWorkspace\\OidFX\\Source\\Renderer\\Grammar\\EffectLexer.l"
{ m_column += strlen(yytext);	return EffectParserBase::TOKEN_SELECTARG2;				}
	YY_BREAK
case 89:
#line 152 "c:\\Documents and Settings\\Bryan\\My Documents\\PerforceWorkspace\\OidFX\\Source\\Renderer\\Grammar\\EffectLexer.l"
{ m_column += strlen(yytext);	return EffectParserBase::TOKEN_MODULATE;				}
	YY_BREAK
case 90:
#line 153 "c:\\Documents and Settings\\Bryan\\My Documents\\PerforceWorkspace\\OidFX\\Source\\Renderer\\Grammar\\EffectLexer.l"
{ m_column += strlen(yytext);	return EffectParserBase::TOKEN_MODULATE2X;				}
	YY_BREAK
case 91:
#line 154 "c:\\Documents and Settings\\Bryan\\My Documents\\PerforceWorkspace\\OidFX\\Source\\Renderer\\Grammar\\EffectLexer.l"
{ m_column += strlen(yytext);	return EffectParserBase::TOKEN_MODULATE4X;				}
	YY_BREAK
case 92:
#line 155 "c:\\Documents and Settings\\Bryan\\My Documents\\PerforceWorkspace\\OidFX\\Source\\Renderer\\Grammar\\EffectLexer.l"
{ m_column += strlen(yytext);	return EffectParserBase::TOKEN_ADD;						}
	YY_BREAK
case 93:
#line 156 "c:\\Documents and Settings\\Bryan\\My Documents\\PerforceWorkspace\\OidFX\\Source\\Renderer\\Grammar\\EffectLexer.l"
{ m_column += strlen(yytext);	return EffectParserBase::TOKEN_ADDSIGNED;				}
	YY_BREAK
case 94:
#line 157 "c:\\Documents and Settings\\Bryan\\My Documents\\PerforceWorkspace\\OidFX\\Source\\Renderer\\Grammar\\EffectLexer.l"
{ m_column += strlen(yytext);	return EffectParserBase::TOKEN_SUBTRACT;				}
	YY_BREAK
case 95:
#line 158 "c:\\Documents and Settings\\Bryan\\My Documents\\PerforceWorkspace\\OidFX\\Source\\Renderer\\Grammar\\EffectLexer.l"
{ m_column += strlen(yytext);	return EffectParserBase::TOKEN_ADDSMOOTH;				}
	YY_BREAK
case 96:
#line 159 "c:\\Documents and Settings\\Bryan\\My Documents\\PerforceWorkspace\\OidFX\\Source\\Renderer\\Grammar\\EffectLexer.l"
{ m_column += strlen(yytext);	return EffectParserBase::TOKEN_BLENDDIFFUSEALPHA;		}
	YY_BREAK
case 97:
#line 160 "c:\\Documents and Settings\\Bryan\\My Documents\\PerforceWorkspace\\OidFX\\Source\\Renderer\\Grammar\\EffectLexer.l"
{ m_column += strlen(yytext);	return EffectParserBase::TOKEN_BLENDTEXTUREALPHA;		}
	YY_BREAK
case 98:
#line 161 "c:\\Documents and Settings\\Bryan\\My Documents\\PerforceWorkspace\\OidFX\\Source\\Renderer\\Grammar\\EffectLexer.l"
{ m_column += strlen(yytext);	return EffectParserBase::TOKEN_BLENDFACTORALPHA;		}
	YY_BREAK
case 99:
#line 162 "c:\\Documents and Settings\\Bryan\\My Documents\\PerforceWorkspace\\OidFX\\Source\\Renderer\\Grammar\\EffectLexer.l"
{ m_column += strlen(yytext);	return EffectParserBase::TOKEN_BLENDTEXTUREALPHAPM;					}
	YY_BREAK
case 100:
#line 163 "c:\\Documents and Settings\\Bryan\\My Documents\\PerforceWorkspace\\OidFX\\Source\\Renderer\\Grammar\\EffectLexer.l"
{ m_column += strlen(yytext);	return EffectParserBase::TOKEN_BLENDCURRENTALPHA;					}
	YY_BREAK
case 101:
#line 164 "c:\\Documents and Settings\\Bryan\\My Documents\\PerforceWorkspace\\OidFX\\Source\\Renderer\\Grammar\\EffectLexer.l"
{ m_column += strlen(yytext);	return EffectParserBase::TOKEN_PREMODULATE;							}
	YY_BREAK
case 102:
#line 165 "c:\\Documents and Settings\\Bryan\\My Documents\\PerforceWorkspace\\OidFX\\Source\\Renderer\\Grammar\\EffectLexer.l"
{ m_column += strlen(yytext);	return EffectParserBase::TOKEN_MODULATEALPHA_ADDCOLOUR;			}
	YY_BREAK
case 103:
#line 166 "c:\\Documents and Settings\\Bryan\\My Documents\\PerforceWorkspace\\OidFX\\Source\\Renderer\\Grammar\\EffectLexer.l"
{ m_column += strlen(yytext);	return EffectParserBase::TOKEN_MODULATECOLOUR_ADDALPHA;			}
	YY_BREAK
case 104:
#line 167 "c:\\Documents and Settings\\Bryan\\My Documents\\PerforceWorkspace\\OidFX\\Source\\Renderer\\Grammar\\EffectLexer.l"
{ m_column += strlen(yytext);	return EffectParserBase::TOKEN_DOTPRODUCT3;						}
	YY_BREAK
case 105:
#line 168 "c:\\Documents and Settings\\Bryan\\My Documents\\PerforceWorkspace\\OidFX\\Source\\Renderer\\Grammar\\EffectLexer.l"
{ m_column += strlen(yytext);	return EffectParserBase::TOKEN_MULTIPLYADD;						}
	YY_BREAK
case 106:
#line 169 "c:\\Documents and Settings\\Bryan\\My Documents\\PerforceWorkspace\\OidFX\\Source\\Renderer\\Grammar\\EffectLexer.l"
{ m_column += strlen(yytext);	return EffectParserBase::TOKEN_LERP;							}
	YY_BREAK
case 107:
#line 170 "c:\\Documents and Settings\\Bryan\\My Documents\\PerforceWorkspace\\OidFX\\Source\\Renderer\\Grammar\\EffectLexer.l"
{ m_column += strlen(yytext);	return EffectParserBase::TOKEN_CURRENT;							}
	YY_BREAK
case 108:
#line 171 "c:\\Documents and Settings\\Bryan\\My Documents\\PerforceWorkspace\\OidFX\\Source\\Renderer\\Grammar\\EffectLexer.l"
{ m_column += strlen(yytext);	return EffectParserBase::TOKEN_TEXTURE;							}
	YY_BREAK
case 109:
#line 172 "c:\\Documents and Settings\\Bryan\\My Documents\\PerforceWorkspace\\OidFX\\Source\\Renderer\\Grammar\\EffectLexer.l"
{ m_column += strlen(yytext);	return EffectParserBase::TOKEN_DIFFUSE;							}
	YY_BREAK
case 110:
#line 173 "c:\\Documents and Settings\\Bryan\\My Documents\\PerforceWorkspace\\OidFX\\Source\\Renderer\\Grammar\\EffectLexer.l"
{ m_column += strlen(yytext);	return EffectParserBase::TOKEN_SPECULAR;						}
	YY_BREAK
case 111:
#line 174 "c:\\Documents and Settings\\Bryan\\My Documents\\PerforceWorkspace\\OidFX\\Source\\Renderer\\Grammar\\EffectLexer.l"
{ m_column += strlen(yytext);	return EffectParserBase::TOKEN_CONSTANT;						}
	YY_BREAK
case 112:
#line 175 "c:\\Documents and Settings\\Bryan\\My Documents\\PerforceWorkspace\\OidFX\\Source\\Renderer\\Grammar\\EffectLexer.l"
{ m_column += strlen(yytext);	return EffectParserBase::TOKEN_CONSTANTCOLOUR;					}
	YY_BREAK
case 113:
#line 176 "c:\\Documents and Settings\\Bryan\\My Documents\\PerforceWorkspace\\OidFX\\Source\\Renderer\\Grammar\\EffectLexer.l"
{ m_column += strlen(yytext);	return EffectParserBase::TOKEN_TEXCOORDGEN;						}
	YY_BREAK
case 114:
#line 177 "c:\\Documents and Settings\\Bryan\\My Documents\\PerforceWorkspace\\OidFX\\Source\\Renderer\\Grammar\\EffectLexer.l"
{ m_column += strlen(yytext);	return EffectParserBase::TOKEN_SPHEREMAP;						}
	YY_BREAK
case 115:
#line 178 "c:\\Documents and Settings\\Bryan\\My Documents\\PerforceWorkspace\\OidFX\\Source\\Renderer\\Grammar\\EffectLexer.l"
{ m_column += strlen(yytext);	return EffectParserBase::TOKEN_EYESPACE_REFLECTION;				}
	YY_BREAK
case 116:
#line 179 "c:\\Documents and Settings\\Bryan\\My Documents\\PerforceWorkspace\\OidFX\\Source\\Renderer\\Grammar\\EffectLexer.l"
{ m_column += strlen(yytext);	return EffectParserBase::TOKEN_EYESPACE_NORMAL;					}
	YY_BREAK
case 117:
#line 180 "c:\\Documents and Settings\\Bryan\\My Documents\\PerforceWorkspace\\OidFX\\Source\\Renderer\\Grammar\\EffectLexer.l"
{ m_column += strlen(yytext);	return EffectParserBase::TOKEN_SCROLL;							}
	YY_BREAK
case 118:
#line 181 "c:\\Documents and Settings\\Bryan\\My Documents\\PerforceWorkspace\\OidFX\\Source\\Renderer\\Grammar\\EffectLexer.l"
{ m_column += strlen(yytext);	return EffectParserBase::TOKEN_ROTATE;							}
	YY_BREAK
case 119:
#line 182 "c:\\Documents and Settings\\Bryan\\My Documents\\PerforceWorkspace\\OidFX\\Source\\Renderer\\Grammar\\EffectLexer.l"
{ m_column += strlen(yytext);	return EffectParserBase::TOKEN_SCALE;							}
	YY_BREAK
case 120:
#line 183 "c:\\Documents and Settings\\Bryan\\My Documents\\PerforceWorkspace\\OidFX\\Source\\Renderer\\Grammar\\EffectLexer.l"
{ m_column += strlen(yytext);	return EffectParserBase::TOKEN_SCROLLANIM;						}
	YY_BREAK
case 121:
#line 184 "c:\\Documents and Settings\\Bryan\\My Documents\\PerforceWorkspace\\OidFX\\Source\\Renderer\\Grammar\\EffectLexer.l"
{ m_column += strlen(yytext);	return EffectParserBase::TOKEN_ROTATEANIM;						}
	YY_BREAK
case 122:
#line 185 "c:\\Documents and Settings\\Bryan\\My Documents\\PerforceWorkspace\\OidFX\\Source\\Renderer\\Grammar\\EffectLexer.l"
{ m_column += strlen(yytext);	return EffectParserBase::TOKEN_SCALEANIM;						}
	YY_BREAK
case 123:
#line 187 "c:\\Documents and Settings\\Bryan\\My Documents\\PerforceWorkspace\\OidFX\\Source\\Renderer\\Grammar\\EffectLexer.l"
{ m_column += strlen(yytext);	return EffectParserBase::TOKEN_WAVEXFORM;						}
	YY_BREAK
case 124:
#line 188 "c:\\Documents and Settings\\Bryan\\My Documents\\PerforceWorkspace\\OidFX\\Source\\Renderer\\Grammar\\EffectLexer.l"
{ m_column += strlen(yytext);	return EffectParserBase::TOKEN_SCROLL_X;						}
	YY_BREAK
case 125:
#line 189 "c:\\Documents and Settings\\Bryan\\My Documents\\PerforceWorkspace\\OidFX\\Source\\Renderer\\Grammar\\EffectLexer.l"
{ m_column += strlen(yytext);	return EffectParserBase::TOKEN_SCROLL_Y;						} 
	YY_BREAK
case 126:
#line 190 "c:\\Documents and Settings\\Bryan\\My Documents\\PerforceWorkspace\\OidFX\\Source\\Renderer\\Grammar\\EffectLexer.l"
{ m_column += strlen(yytext);	return EffectParserBase::TOKEN_ROTATE;							}
	YY_BREAK
case 127:
#line 191 "c:\\Documents and Settings\\Bryan\\My Documents\\PerforceWorkspace\\OidFX\\Source\\Renderer\\Grammar\\EffectLexer.l"
{ m_column += strlen(yytext);	return EffectParserBase::TOKEN_SCALE_X;							}
	YY_BREAK
case 128:
#line 192 "c:\\Documents and Settings\\Bryan\\My Documents\\PerforceWorkspace\\OidFX\\Source\\Renderer\\Grammar\\EffectLexer.l"
{ m_column += strlen(yytext);	return EffectParserBase::TOKEN_SCALE_Y;							}
	YY_BREAK
case 129:
#line 193 "c:\\Documents and Settings\\Bryan\\My Documents\\PerforceWorkspace\\OidFX\\Source\\Renderer\\Grammar\\EffectLexer.l"
{ m_column += strlen(yytext);	return EffectParserBase::TOKEN_SINE;							}
	YY_BREAK
case 130:
#line 194 "c:\\Documents and Settings\\Bryan\\My Documents\\PerforceWorkspace\\OidFX\\Source\\Renderer\\Grammar\\EffectLexer.l"
{ m_column += strlen(yytext);	return EffectParserBase::TOKEN_SQUARE;							}
	YY_BREAK
case 131:
#line 195 "c:\\Documents and Settings\\Bryan\\My Documents\\PerforceWorkspace\\OidFX\\Source\\Renderer\\Grammar\\EffectLexer.l"
{ m_column += strlen(yytext);	return EffectParserBase::TOKEN_SAWTOOTH;						}
	YY_BREAK
case 132:
#line 196 "c:\\Documents and Settings\\Bryan\\My Documents\\PerforceWorkspace\\OidFX\\Source\\Renderer\\Grammar\\EffectLexer.l"
{ m_column += strlen(yytext);	return EffectParserBase::TOKEN_INVERSE_SAWTOOTH;				}
	YY_BREAK
case 133:
#line 197 "c:\\Documents and Settings\\Bryan\\My Documents\\PerforceWorkspace\\OidFX\\Source\\Renderer\\Grammar\\EffectLexer.l"
{ m_column += strlen(yytext);	return EffectParserBase::TOKEN_TRIANGLE;						}
	YY_BREAK
case 134:
#line 198 "c:\\Documents and Settings\\Bryan\\My Documents\\PerforceWorkspace\\OidFX\\Source\\Renderer\\Grammar\\EffectLexer.l"
{ m_column += strlen(yytext);	return EffectParserBase::TOKEN_WAVETYPE;						}
	YY_BREAK
case 135:
#line 199 "c:\\Documents and Settings\\Bryan\\My Documents\\PerforceWorkspace\\OidFX\\Source\\Renderer\\Grammar\\EffectLexer.l"
{ m_column += strlen(yytext);	return EffectParserBase::TOKEN_XFORMTYPE;						}
	YY_BREAK
case 136:
#line 200 "c:\\Documents and Settings\\Bryan\\My Documents\\PerforceWorkspace\\OidFX\\Source\\Renderer\\Grammar\\EffectLexer.l"
{ m_column += strlen(yytext);	return EffectParserBase::TOKEN_PHASE;							}
	YY_BREAK
case 137:
#line 201 "c:\\Documents and Settings\\Bryan\\My Documents\\PerforceWorkspace\\OidFX\\Source\\Renderer\\Grammar\\EffectLexer.l"
{ m_column += strlen(yytext);	return EffectParserBase::TOKEN_BASE;							}
	YY_BREAK
case 138:
#line 202 "c:\\Documents and Settings\\Bryan\\My Documents\\PerforceWorkspace\\OidFX\\Source\\Renderer\\Grammar\\EffectLexer.l"
{ m_column += strlen(yytext);	return EffectParserBase::TOKEN_FREQUENCY;						}
	YY_BREAK
case 139:
#line 203 "c:\\Documents and Settings\\Bryan\\My Documents\\PerforceWorkspace\\OidFX\\Source\\Renderer\\Grammar\\EffectLexer.l"
{ m_column += strlen(yytext);	return EffectParserBase::TOKEN_AMPLITUDE;						}
	YY_BREAK
case 140:
#line 206 "c:\\Documents and Settings\\Bryan\\My Documents\\PerforceWorkspace\\OidFX\\Source\\Renderer\\Grammar\\EffectLexer.l"
{ m_column += strlen(yytext);	return EffectParserBase::TOKEN_ADD;					}			
	YY_BREAK
case 141:
#line 207 "c:\\Documents and Settings\\Bryan\\My Documents\\PerforceWorkspace\\OidFX\\Source\\Renderer\\Grammar\\EffectLexer.l"
{ m_column += strlen(yytext);	return EffectParserBase::TOKEN_MODULATE;			}
	YY_BREAK
case 142:
#line 208 "c:\\Documents and Settings\\Bryan\\My Documents\\PerforceWorkspace\\OidFX\\Source\\Renderer\\Grammar\\EffectLexer.l"
{ m_column += strlen(yytext);	return EffectParserBase::TOKEN_COLOURBLEND;			}	
	YY_BREAK
case 143:
#line 209 "c:\\Documents and Settings\\Bryan\\My Documents\\PerforceWorkspace\\OidFX\\Source\\Renderer\\Grammar\\EffectLexer.l"
{ m_column += strlen(yytext);	return EffectParserBase::TOKEN_ALPHABLEND;			}
	YY_BREAK
case 144:
#line 210 "c:\\Documents and Settings\\Bryan\\My Documents\\PerforceWorkspace\\OidFX\\Source\\Renderer\\Grammar\\EffectLexer.l"
{ m_column += strlen(yytext);	return EffectParserBase::TOKEN_ONE;					}				
	YY_BREAK
case 145:
#line 211 "c:\\Documents and Settings\\Bryan\\My Documents\\PerforceWorkspace\\OidFX\\Source\\Renderer\\Grammar\\EffectLexer.l"
{ m_column += strlen(yytext);	return EffectParserBase::TOKEN_ZERO;				}			
	YY_BREAK
case 146:
#line 212 "c:\\Documents and Settings\\Bryan\\My Documents\\PerforceWorkspace\\OidFX\\Source\\Renderer\\Grammar\\EffectLexer.l"
{ m_column += strlen(yytext);	return EffectParserBase::TOKEN_SRCCOLOUR;			}		
	YY_BREAK
case 147:
#line 213 "c:\\Documents and Settings\\Bryan\\My Documents\\PerforceWorkspace\\OidFX\\Source\\Renderer\\Grammar\\EffectLexer.l"
{ m_column += strlen(yytext);	return EffectParserBase::TOKEN_INVSRCCOLOUR;		}
	YY_BREAK
case 148:
#line 214 "c:\\Documents and Settings\\Bryan\\My Documents\\PerforceWorkspace\\OidFX\\Source\\Renderer\\Grammar\\EffectLexer.l"
{ m_column += strlen(yytext);	return EffectParserBase::TOKEN_SRCALPHA;			}
	YY_BREAK
case 149:
#line 215 "c:\\Documents and Settings\\Bryan\\My Documents\\PerforceWorkspace\\OidFX\\Source\\Renderer\\Grammar\\EffectLexer.l"
{ m_column += strlen(yytext);	return EffectParserBase::TOKEN_INVSRCALPHA;			}	
	YY_BREAK
case 150:
#line 216 "c:\\Documents and Settings\\Bryan\\My Documents\\PerforceWorkspace\\OidFX\\Source\\Renderer\\Grammar\\EffectLexer.l"
{ m_column += strlen(yytext);	return EffectParserBase::TOKEN_SRCALPHASAT;				}	
	YY_BREAK
case 151:
#line 217 "c:\\Documents and Settings\\Bryan\\My Documents\\PerforceWorkspace\\OidFX\\Source\\Renderer\\Grammar\\EffectLexer.l"
{ m_column += strlen(yytext);	return EffectParserBase::TOKEN_DESTALPHA;					}
	YY_BREAK
case 152:
#line 218 "c:\\Documents and Settings\\Bryan\\My Documents\\PerforceWorkspace\\OidFX\\Source\\Renderer\\Grammar\\EffectLexer.l"
{ m_column += strlen(yytext);	return EffectParserBase::TOKEN_INVDESTALPHA;				}
	YY_BREAK
case 153:
#line 219 "c:\\Documents and Settings\\Bryan\\My Documents\\PerforceWorkspace\\OidFX\\Source\\Renderer\\Grammar\\EffectLexer.l"
{ m_column += strlen(yytext);	return EffectParserBase::TOKEN_DESTCOLOUR;					}
	YY_BREAK
case 154:
#line 220 "c:\\Documents and Settings\\Bryan\\My Documents\\PerforceWorkspace\\OidFX\\Source\\Renderer\\Grammar\\EffectLexer.l"
{ m_column += strlen(yytext);	return EffectParserBase::TOKEN_INVDESTCOLOUR;				}
	YY_BREAK
case 155:
#line 221 "c:\\Documents and Settings\\Bryan\\My Documents\\PerforceWorkspace\\OidFX\\Source\\Renderer\\Grammar\\EffectLexer.l"
{ m_column += strlen(yytext);	return EffectParserBase::TOKEN_BLENDFACTOR;				}
	YY_BREAK
case 156:
#line 222 "c:\\Documents and Settings\\Bryan\\My Documents\\PerforceWorkspace\\OidFX\\Source\\Renderer\\Grammar\\EffectLexer.l"
{ m_column += strlen(yytext);	return EffectParserBase::TOKEN_INVBLENDFACTOR;				}
	YY_BREAK
case 157:
#line 223 "c:\\Documents and Settings\\Bryan\\My Documents\\PerforceWorkspace\\OidFX\\Source\\Renderer\\Grammar\\EffectLexer.l"
{ m_column += strlen(yytext);	return EffectParserBase::TOKEN_BOTHINVSRCALPHA;			}
	YY_BREAK
case 158:
#line 225 "c:\\Documents and Settings\\Bryan\\My Documents\\PerforceWorkspace\\OidFX\\Source\\Renderer\\Grammar\\EffectLexer.l"
{ m_column += strlen(yytext);	return EffectParserBase::TOKEN_ALWAYS;						}
	YY_BREAK
case 159:
#line 226 "c:\\Documents and Settings\\Bryan\\My Documents\\PerforceWorkspace\\OidFX\\Source\\Renderer\\Grammar\\EffectLexer.l"
{ m_column += strlen(yytext);	return EffectParserBase::TOKEN_NEVER;						}
	YY_BREAK
case 160:
#line 227 "c:\\Documents and Settings\\Bryan\\My Documents\\PerforceWorkspace\\OidFX\\Source\\Renderer\\Grammar\\EffectLexer.l"
{ m_column += strlen(yytext);	return EffectParserBase::TOKEN_LESS;						}
	YY_BREAK
case 161:
#line 228 "c:\\Documents and Settings\\Bryan\\My Documents\\PerforceWorkspace\\OidFX\\Source\\Renderer\\Grammar\\EffectLexer.l"
{ m_column += strlen(yytext);	return EffectParserBase::TOKEN_LEQUAL;						}
	YY_BREAK
case 162:
#line 229 "c:\\Documents and Settings\\Bryan\\My Documents\\PerforceWorkspace\\OidFX\\Source\\Renderer\\Grammar\\EffectLexer.l"
{ m_column += strlen(yytext);	return EffectParserBase::TOKEN_EQUAL;						}
	YY_BREAK
case 163:
#line 230 "c:\\Documents and Settings\\Bryan\\My Documents\\PerforceWorkspace\\OidFX\\Source\\Renderer\\Grammar\\EffectLexer.l"
{ m_column += strlen(yytext);	return EffectParserBase::TOKEN_NOTEQUAL;					}
	YY_BREAK
case 164:
#line 231 "c:\\Documents and Settings\\Bryan\\My Documents\\PerforceWorkspace\\OidFX\\Source\\Renderer\\Grammar\\EffectLexer.l"
{ m_column += strlen(yytext);	return EffectParserBase::TOKEN_GEQUAL;						}
	YY_BREAK
case 165:
#line 232 "c:\\Documents and Settings\\Bryan\\My Documents\\PerforceWorkspace\\OidFX\\Source\\Renderer\\Grammar\\EffectLexer.l"
{ m_column += strlen(yytext);	return EffectParserBase::TOKEN_GREATER;					}
	YY_BREAK
case 166:
#line 234 "c:\\Documents and Settings\\Bryan\\My Documents\\PerforceWorkspace\\OidFX\\Source\\Renderer\\Grammar\\EffectLexer.l"
{ return EffectParserBase::TOKEN_LEFTCURLYBRACKET;		}
	YY_BREAK
case 167:
#line 235 "c:\\Documents and Settings\\Bryan\\My Documents\\PerforceWorkspace\\OidFX\\Source\\Renderer\\Grammar\\EffectLexer.l"
{ return EffectParserBase::TOKEN_RIGHTCURLYBRACKET;		}
	YY_BREAK
case 168:
#line 236 "c:\\Documents and Settings\\Bryan\\My Documents\\PerforceWorkspace\\OidFX\\Source\\Renderer\\Grammar\\EffectLexer.l"
{ return EffectParserBase::TOKEN_COMMA;					}
	YY_BREAK
case 169:
#line 237 "c:\\Documents and Settings\\Bryan\\My Documents\\PerforceWorkspace\\OidFX\\Source\\Renderer\\Grammar\\EffectLexer.l"
{ return EffectParserBase::TOKEN_ENABLED;				}
	YY_BREAK
case 170:
#line 238 "c:\\Documents and Settings\\Bryan\\My Documents\\PerforceWorkspace\\OidFX\\Source\\Renderer\\Grammar\\EffectLexer.l"
{ return EffectParserBase::TOKEN_DISABLED;				}			
	YY_BREAK
case 171:
#line 240 "c:\\Documents and Settings\\Bryan\\My Documents\\PerforceWorkspace\\OidFX\\Source\\Renderer\\Grammar\\EffectLexer.l"
{	
						 //Copy the string without quotes to yytext
						 val->assign ( &yytext[1], strlen(yytext)-2 );
						 
						 return EffectParserBase::TOKEN_STRING;
					}
	YY_BREAK
case 172:
#line 247 "c:\\Documents and Settings\\Bryan\\My Documents\\PerforceWorkspace\\OidFX\\Source\\Renderer\\Grammar\\EffectLexer.l"
{	
						 //Copy the number as a string, we'll convert it in the parser
						 val->assign ( &yytext[0], strlen(yytext));
						 
						 return EffectParserBase::TOKEN_FLOAT;	 
					}		
	YY_BREAK
case 173:
#line 255 "c:\\Documents and Settings\\Bryan\\My Documents\\PerforceWorkspace\\OidFX\\Source\\Renderer\\Grammar\\EffectLexer.l"
{ m_column += strlen(yytext); ++m_line;		}
	YY_BREAK
case 174:
#line 256 "c:\\Documents and Settings\\Bryan\\My Documents\\PerforceWorkspace\\OidFX\\Source\\Renderer\\Grammar\\EffectLexer.l"
{ m_column += strlen(yytext);				}
	YY_BREAK
case 175:
#line 257 "c:\\Documents and Settings\\Bryan\\My Documents\\PerforceWorkspace\\OidFX\\Source\\Renderer\\Grammar\\EffectLexer.l"
{ ++m_line;	m_column = 0;					}
	YY_BREAK
case 176:
#line 262 "c:\\Documents and Settings\\Bryan\\My Documents\\PerforceWorkspace\\OidFX\\Source\\Renderer\\Grammar\\EffectLexer.l"
{ return EffectParserBase::ERROR_TOKEN;		} /*Other character, error, illegal token*/
	YY_BREAK
case YY_STATE_EOF(INITIAL):
#line 263 "c:\\Documents and Settings\\Bryan\\My Documents\\PerforceWorkspace\\OidFX\\Source\\Renderer\\Grammar\\EffectLexer.l"
{ yyterminate();							} /*End of file							 */
	YY_BREAK
case 178:
#line 265 "c:\\Documents and Settings\\Bryan\\My Documents\\PerforceWorkspace\\OidFX\\Source\\Renderer\\Grammar\\EffectLexer.l"
ECHO;
	YY_BREAK
#line 493 "c:\\Documents and Settings\\Bryan\\My Documents\\PerforceWorkspace\\OidFX\\Tools\\flex++bison++\\flexskel.cc"

	    case YY_END_OF_BUFFER:
		{
		/* amount of text matched not including the EOB char */
		int yy_amount_of_matched_text = yy_cp - yy___text - 1;

		/* undo the effects of YY_DO_BEFORE_ACTION */
		*yy_cp = yy_hold_char;

		/* note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the end-
		 * of-buffer state).  Contrast this with the test in yyinput().
		 */
		if ( yy_c_buf_p <= &YY_EffectLexer_CURRENT_BUFFER->yy_ch_buf[yy_n_chars] )
		    /* this was really a NUL */
		    {
		    yy_state_type yy_next_state;

		    yy_c_buf_p = yy___text + yy_amount_of_matched_text;

		    yy_current_state = yy_get_previous_state();

		    /* okay, we're now positioned to make the
		     * NUL transition.  We couldn't have
		     * yy_get_previous_state() go ahead and do it
		     * for us because it doesn't know how to deal
		     * with the possibility of jamming (and we
		     * don't want to build jamming into it because
		     * then it will run more slowly)
		     */

		    yy_next_state = yy_try_NUL_trans( yy_current_state );

		    yy_bp = yy___text + YY_MORE_ADJ;

		    if ( yy_next_state )
			{
			/* consume the NUL */
			yy_cp = ++yy_c_buf_p;
			yy_current_state = yy_next_state;
			goto yy_match;
			}

		    else
			{
/* % code to do backtracking for compressed tables and set up yy_cp goes here */ 
			    yy_cp = yy_last_accepting_cpos;
			    yy_current_state = yy_last_accepting_state;
#line 541 "c:\\Documents and Settings\\Bryan\\My Documents\\PerforceWorkspace\\OidFX\\Tools\\flex++bison++\\flexskel.cc"
			goto yy_find_action;
			}
		    }

		else switch ( yy_get_next_buffer() )
		    {
		    case EOB_ACT_END_OF_FILE:
			{
			yy_did_buffer_switch_on_eof = 0;

			if ( yywrap() )
			    {
			    /* note: because we've taken care in
			     * yy_get_next_buffer() to have set up yy___text,
			     * we can now set up yy_c_buf_p so that if some
			     * total hoser (like flex itself) wants
			     * to call the scanner after we return the
			     * YY_NULL, it'll still work - another YY_NULL
			     * will get returned.
			     */
			    yy_c_buf_p = yy___text + YY_MORE_ADJ;

			    yy_act = YY_STATE_EOF((yy_start - 1) / 2);
			    goto do_action;
			    }

			else
			    {
			    if ( ! yy_did_buffer_switch_on_eof )
				YY_NEW_FILE;
			    }
			}
			break;

		    case EOB_ACT_CONTINUE_SCAN:
			yy_c_buf_p = yy___text + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state();

			yy_cp = yy_c_buf_p;
			yy_bp = yy___text + YY_MORE_ADJ;
			goto yy_match;

		    case EOB_ACT_LAST_MATCH:
			yy_c_buf_p =
			    &YY_EffectLexer_CURRENT_BUFFER->yy_ch_buf[yy_n_chars];

			yy_current_state = yy_get_previous_state();

			yy_cp = yy_c_buf_p;
			yy_bp = yy___text + YY_MORE_ADJ;
			goto yy_find_action;
		    }
		break;
		}

	    default:
#if YY_EffectLexer_DEBUG != 0
#ifndef YY_EffectLexer_IOSTREAM
		fprintf(yy___stderr , "action # %d\n", yy_act );
#else
		yy___stderr <<"action # "<<(int)yy_act<<endl;
#endif
#endif
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	    }
	}
	yyterminate();/* avoid the no return value error message on MS-C7/dos */
    }


/* yy_get_next_buffer - try to read in a new buffer
 *
 * synopsis
 *     int yy_get_next_buffer();
 *     
 * returns a code representing an action
 *     EOB_ACT_LAST_MATCH - 
 *     EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *     EOB_ACT_END_OF_FILE - end of file
 */
#ifndef YY_USE_CLASS
static int yy_get_next_buffer()
#else
int YY_EffectLexer_CLASS::yy_get_next_buffer()
#endif
    {
    register YY_EffectLexer_CHAR *dest = YY_EffectLexer_CURRENT_BUFFER->yy_ch_buf;
    register YY_EffectLexer_CHAR *source = yy___text - 1; /* copy prev. char, too */
    register int number_to_move, i;
    int ret_val;

    if ( yy_c_buf_p > &YY_EffectLexer_CURRENT_BUFFER->yy_ch_buf[yy_n_chars + 1] )
	YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

    /* try to read more data */

    /* first move last chars to start of buffer */
    number_to_move = yy_c_buf_p - yy___text;

    for ( i = 0; i < number_to_move; ++i )
	*(dest++) = *(source++);

    if ( YY_EffectLexer_CURRENT_BUFFER->yy_eof_status != EOF_NOT_SEEN )
	/* don't do the read, it's not guaranteed to return an EOF,
	 * just force an EOF
	 */
	yy_n_chars = 0;

    else
	{
	int num_to_read = YY_EffectLexer_CURRENT_BUFFER->yy_buf_size - number_to_move - 1;

	if ( num_to_read > YY_READ_BUF_SIZE )
	    num_to_read = YY_READ_BUF_SIZE;

	else if ( num_to_read <= 0 )
	    YY_FATAL_ERROR( "fatal error - scanner input buffer overflow" );

	/* read in more data */
	YY_INPUT( (&YY_EffectLexer_CURRENT_BUFFER->yy_ch_buf[number_to_move]),
		  yy_n_chars, num_to_read );
	}

    if ( yy_n_chars == 0 )
	{
	if ( number_to_move - YY_MORE_ADJ == 1 )
	    {
	    ret_val = EOB_ACT_END_OF_FILE;
	    YY_EffectLexer_CURRENT_BUFFER->yy_eof_status = EOF_DONE;
	    }

	else
	    {
	    ret_val = EOB_ACT_LAST_MATCH;
	    YY_EffectLexer_CURRENT_BUFFER->yy_eof_status = EOF_PENDING;
	    }
	}

    else
	ret_val = EOB_ACT_CONTINUE_SCAN;

    yy_n_chars += number_to_move;
    YY_EffectLexer_CURRENT_BUFFER->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
    YY_EffectLexer_CURRENT_BUFFER->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

    /* yy___text begins at the second character in yy_ch_buf; the first
     * character is the one which preceded it before reading in the latest
     * buffer; it needs to be kept around in case it's a newline, so
     * yy_get_previous_state() will have with '^' rules active
     */

    yy___text = &YY_EffectLexer_CURRENT_BUFFER->yy_ch_buf[1];

    return ( ret_val );
    }


/* yy_get_previous_state - get the state just before the EOB char was reached
 *
 * synopsis
 *     yy_state_type yy_get_previous_state();
 */

#ifndef YY_USE_CLASS
static yy_state_type yy_get_previous_state()
#else
long YY_EffectLexer_CLASS::yy_get_previous_state_()
#endif
    {
    register yy_state_type yy_current_state;
    register YY_EffectLexer_CHAR *yy_cp;

/* % code to get the start state into yy_current_state goes here */ 
    yy_current_state = yy_start;
#line 717 "c:\\Documents and Settings\\Bryan\\My Documents\\PerforceWorkspace\\OidFX\\Tools\\flex++bison++\\flexskel.cc"

    for ( yy_cp = yy___text + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
	{
/* % code to find the next state goes here */ 
	register YY_CHAR yy_c = (*yy_cp ? yy_ec[*yy_cp] : 1);
	if ( yy_accept[yy_current_state] )
	    {
	    yy_last_accepting_state = yy_current_state;
	    yy_last_accepting_cpos = yy_cp;
	    }
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
	    {
	    yy_current_state = yy_def[yy_current_state];
	    if ( yy_current_state >= 1063 )
		yy_c = yy_meta[yy_c];
	    }
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
#line 721 "c:\\Documents and Settings\\Bryan\\My Documents\\PerforceWorkspace\\OidFX\\Tools\\flex++bison++\\flexskel.cc"
	}

#ifndef YY_USE_CLASS
    return ( yy_current_state );
#else
    return (long)( yy_current_state );
#endif
    }


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *     next_state = yy_try_NUL_trans( current_state );
 */

#ifndef YY_USE_CLASS
#ifdef YY_USE_PROTOS
static yy_state_type yy_try_NUL_trans( register yy_state_type yy_current_state )
#else
static yy_state_type yy_try_NUL_trans( yy_current_state )
register yy_state_type yy_current_state;
#endif
#else
long YY_EffectLexer_CLASS::yy_try_NUL_trans_(long yy_current_state_)
#endif

    {
#ifndef YY_USE_CLASS
#else
    yy_state_type yy_current_state=(yy_state_type)yy_current_state_;
#endif
    register int yy_is_jam;
/* % code to find the next state, and perhaps do backtracking, goes here */ 
    register YY_CHAR *yy_cp = yy_c_buf_p;

    register YY_CHAR yy_c = 1;
    if ( yy_accept[yy_current_state] )
	{
	yy_last_accepting_state = yy_current_state;
	yy_last_accepting_cpos = yy_cp;
	}
    while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
	{
	yy_current_state = yy_def[yy_current_state];
	if ( yy_current_state >= 1063 )
	    yy_c = yy_meta[yy_c];
	}
    yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
    yy_is_jam = (yy_current_state == 1062);
#line 755 "c:\\Documents and Settings\\Bryan\\My Documents\\PerforceWorkspace\\OidFX\\Tools\\flex++bison++\\flexskel.cc"

#ifndef YY_USE_CLASS
    return ( yy_is_jam ? 0 : yy_current_state );
#else
    return (long)( yy_is_jam ? 0 : yy_current_state );
#endif
    }

#ifndef YY_USE_CLASS
#ifdef YY_USE_PROTOS
static void yyunput( YY_EffectLexer_CHAR c, register YY_EffectLexer_CHAR *yy_bp )
#else
static void yyunput( c, yy_bp )
YY_EffectLexer_CHAR c;
register YY_EffectLexer_CHAR *yy_bp;
#endif
#else
void YY_EffectLexer_CLASS::yyunput( YY_EffectLexer_CHAR c, YY_EffectLexer_CHAR *yy_bp )
#endif

    {
    register YY_EffectLexer_CHAR *yy_cp = yy_c_buf_p;

    /* undo effects of setting up yy___text */
    *yy_cp = yy_hold_char;

    if ( yy_cp < YY_EffectLexer_CURRENT_BUFFER->yy_ch_buf + 2 )
	{ /* need to shift things up to make room */
	register int number_to_move = yy_n_chars + 2; /* +2 for EOB chars */
	register YY_EffectLexer_CHAR *dest =
	    &YY_EffectLexer_CURRENT_BUFFER->yy_ch_buf[YY_EffectLexer_CURRENT_BUFFER->yy_buf_size + 2];
	register YY_EffectLexer_CHAR *source =
	    &YY_EffectLexer_CURRENT_BUFFER->yy_ch_buf[number_to_move];

	while ( source > YY_EffectLexer_CURRENT_BUFFER->yy_ch_buf )
	    *--dest = *--source;

	yy_cp += dest - source;
	yy_bp += dest - source;
	yy_n_chars = YY_EffectLexer_CURRENT_BUFFER->yy_buf_size;

	if ( yy_cp < YY_EffectLexer_CURRENT_BUFFER->yy_ch_buf + 2 )
	    YY_FATAL_ERROR( "flex scanner push-back overflow" );
	}

    if ( yy_cp > yy_bp && yy_cp[-1] == '\n' )
	yy_cp[-2] = '\n';

    *--yy_cp = c;

    /* note: the formal parameter *must* be called "yy_bp" for this
     *       macro to now work correctly
     */
    YY_DO_BEFORE_ACTION; /* set up yy___text again */
    }

#ifndef YY_USE_CLASS
#ifdef __cplusplus
static int yyinput()
#else
static int input()
#endif
#else
int YY_EffectLexer_CLASS::input()
#endif
    {
    int c;
    YY_EffectLexer_CHAR *yy_cp = yy_c_buf_p;

    *yy_cp = yy_hold_char;

    if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
	{
	/* yy_c_buf_p now points to the character we want to return.
	 * If this occurs *before* the EOB characters, then it's a
	 * valid NUL; if not, then we've hit the end of the buffer.
	 */
	if ( yy_c_buf_p < &YY_EffectLexer_CURRENT_BUFFER->yy_ch_buf[yy_n_chars] )
	    /* this was really a NUL */
	    *yy_c_buf_p = '\0';

	else
	    { /* need more input */
	    yy___text = yy_c_buf_p;
	    ++yy_c_buf_p;

	    switch ( yy_get_next_buffer() )
		{
		case EOB_ACT_END_OF_FILE:
		    {
		    if ( yywrap() )
			{
			yy_c_buf_p = yy___text + YY_MORE_ADJ;
			return ( EOF );
			}

		    YY_NEW_FILE;
#ifndef YY_USE_CLASS
#ifdef __cplusplus
		    return ( yyinput() );
#else
		    return ( input() );
#endif
#else
		    return ( input() );
#endif
		    }
		    break;

		case EOB_ACT_CONTINUE_SCAN:
		    yy_c_buf_p = yy___text + YY_MORE_ADJ;
		    break;

		case EOB_ACT_LAST_MATCH:
#ifndef YY_USE_CLASS
#ifdef __cplusplus
		    YY_FATAL_ERROR( "unexpected last match in yyinput()" );
#else
		    YY_FATAL_ERROR( "unexpected last match in input()" );
#endif
#else
		    YY_FATAL_ERROR( "unexpected last match in YY_EffectLexer_CLASS::input()" );
#endif
		}
	    }
	}

    c = *yy_c_buf_p;
    yy_hold_char = *++yy_c_buf_p;

    return ( c );
    }


#ifndef YY_USE_CLASS
#ifdef YY_USE_PROTOS
void YY_EffectLexer_RESTART( YY_EffectLexer_IFILE  *input_file )
#else
void YY_EffectLexer_RESTART( input_file )
YY_EffectLexer_IFILE  *input_file;
#endif
#else
void YY_EffectLexer_CLASS::YY_EffectLexer_RESTART ( YY_EffectLexer_IFILE  *input_file )
#endif

    {
    YY_EffectLexer_INIT_BUFFER( YY_EffectLexer_CURRENT_BUFFER, input_file );
    YY_EffectLexer_LOAD_BUFFER_STATE();
    }


#ifndef YY_USE_CLASS
#ifdef YY_USE_PROTOS
void YY_EffectLexer_SWITCH_TO_BUFFER( YY_BUFFER_STATE new_buffer )
#else
void YY_EffectLexer_SWITCH_TO_BUFFER( new_buffer )
YY_BUFFER_STATE new_buffer;
#endif
#else
void YY_EffectLexer_CLASS::YY_EffectLexer_SWITCH_TO_BUFFER( YY_BUFFER_STATE new_buffer )
#endif

    {
    if ( YY_EffectLexer_CURRENT_BUFFER == new_buffer )
	return;

    if ( YY_EffectLexer_CURRENT_BUFFER )
	{
	/* flush out information for old buffer */
	*yy_c_buf_p = yy_hold_char;
	YY_EffectLexer_CURRENT_BUFFER->yy_buf_pos = yy_c_buf_p;
	YY_EffectLexer_CURRENT_BUFFER->yy_n_chars = yy_n_chars;
	}

    YY_EffectLexer_CURRENT_BUFFER = new_buffer;
    YY_EffectLexer_LOAD_BUFFER_STATE();

    /* we don't actually know whether we did this switch during
     * EOF (yywrap()) processing, but the only time this flag
     * is looked at is after yywrap() is called, so it's safe
     * to go ahead and always set it.
     */
    yy_did_buffer_switch_on_eof = 1;
    }


#ifndef YY_USE_CLASS
#ifdef YY_USE_PROTOS
void YY_EffectLexer_LOAD_BUFFER_STATE( void )
#else
void YY_EffectLexer_LOAD_BUFFER_STATE()
#endif
#else
void YY_EffectLexer_CLASS::YY_EffectLexer_LOAD_BUFFER_STATE(  )
#endif

    {
    yy_n_chars = YY_EffectLexer_CURRENT_BUFFER->yy_n_chars;
    yy___text = yy_c_buf_p = YY_EffectLexer_CURRENT_BUFFER->yy_buf_pos;
    yy___in = YY_EffectLexer_CURRENT_BUFFER->yy_input_file;
    yy_hold_char = *yy_c_buf_p;
    }


#ifndef YY_USE_CLASS
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE YY_EffectLexer_CREATE_BUFFER( YY_EffectLexer_IFILE  *file, int size )
#else
YY_BUFFER_STATE YY_EffectLexer_CREATE_BUFFER( file, size )
YY_EffectLexer_IFILE  *file;
int size;
#endif
#else
YY_BUFFER_STATE YY_EffectLexer_CLASS::YY_EffectLexer_CREATE_BUFFER( YY_EffectLexer_IFILE  *file, int size )
#endif

    {
    YY_BUFFER_STATE b;

    b = (YY_BUFFER_STATE) malloc( sizeof( struct yy_buffer_state ) );

    if ( ! b )
	YY_FATAL_ERROR( "out of dynamic memory in YY_EffectLexer_CREATE_BUFFER()" );

    b->yy_buf_size = size;

    /* yy_ch_buf has to be 2 characters longer than the size given because
     * we need to put in 2 end-of-buffer characters.
     */
    b->yy_ch_buf = (YY_EffectLexer_CHAR *) malloc( (unsigned) (b->yy_buf_size + 2) );

    if ( ! b->yy_ch_buf )
	YY_FATAL_ERROR( "out of dynamic memory in YY_EffectLexer_CREATE_BUFFER()" );

    YY_EffectLexer_INIT_BUFFER( b, file );

    return ( b );
    }


#ifndef YY_USE_CLASS
#ifdef YY_USE_PROTOS
void YY_EffectLexer_DELETE_BUFFER( YY_BUFFER_STATE b )
#else
void YY_EffectLexer_DELETE_BUFFER( b )
YY_BUFFER_STATE b;
#endif
#else
void YY_EffectLexer_CLASS::YY_EffectLexer_DELETE_BUFFER( YY_BUFFER_STATE b )
#endif

    {
    if ( b == YY_EffectLexer_CURRENT_BUFFER )
	YY_EffectLexer_CURRENT_BUFFER = (YY_BUFFER_STATE) 0;

    free( (char *) b->yy_ch_buf );
    free( (char *) b );
    }


#ifndef YY_USE_CLASS
#ifdef YY_USE_PROTOS
void YY_EffectLexer_INIT_BUFFER( YY_BUFFER_STATE b, YY_EffectLexer_IFILE  *file )
#else
void YY_EffectLexer_INIT_BUFFER( b, file )
YY_BUFFER_STATE b;
YY_EffectLexer_IFILE  *file;
#endif
#else
void YY_EffectLexer_CLASS::YY_EffectLexer_INIT_BUFFER( YY_BUFFER_STATE b, YY_EffectLexer_IFILE  *file)
#endif

    {
    b->yy_input_file = file;

    /* we put in the '\n' and start reading from [1] so that an
     * initial match-at-newline will be true.
     */

    b->yy_ch_buf[0] = '\n';
    b->yy_n_chars = 1;

    /* we always need two end-of-buffer characters.  The first causes
     * a transition to the end-of-buffer state.  The second causes
     * a jam in that state.
     */
    b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;
    b->yy_ch_buf[2] = YY_END_OF_BUFFER_CHAR;

    b->yy_buf_pos = &b->yy_ch_buf[1];

    b->yy_eof_status = EOF_NOT_SEEN;
    }
#line 265 "c:\\Documents and Settings\\Bryan\\My Documents\\PerforceWorkspace\\OidFX\\Source\\Renderer\\Grammar\\EffectLexer.l"


