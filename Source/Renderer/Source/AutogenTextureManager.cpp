//======================================================================================
//! @file         AutogenTextureManager.cpp
//! @brief        Class that manages auto-generated textures. 
//!
//!				  Auto generated textures, are any textures that are generated at run-time
//!				  but should be accessable to effects. 
//!				  Textures in the autogen list are accessable by name, and the texture
//!               associated with that name can change at any time
//!               
//!               
//! @author       Bryan Robertson
//! @date         Wednesday, 13 July 2005
//! @copyright    Bryan Robertson 2005
//
//				  This file is part of OidFX Engine.
//
//  			  OidFX Engine is free software; you can redistribute it and/or modify
//  			  it under the terms of the GNU General Public License as published by
//  			  the Free Software Foundation; either version 2 of the License, or
//  			  (at your option) any later version.
//
//  			  OidFX Engine is distributed in the hope that it will be useful,
//  			  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  			  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//  			  GNU General Public License for more details.
//
//  			  You should have received a copy of the GNU General Public License
//  			  along with OidFX Engine; if not, write to the Free Software
//  			  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
//
//======================================================================================

#include "Core/Core.h"
#include "Renderer/Renderer.h"
#include "Renderer/AutogenTextureManager.h"


using namespace Renderer;



//=========================================================================
//! @function    AutogenTextureManager::AutogenTextureManager
//! @brief       AutogenTextureManager constructor
//!              
//! @param       renderer [in]
//!              
//=========================================================================
AutogenTextureManager::AutogenTextureManager ( IRenderer& renderer )
: m_renderer(renderer)
{
	for ( UInt i=0; i<TEXTURE_STAGE_COUNT; ++i )
	{
		m_bindings[i] = 0;
	}
}
//End AutogenTextureManager::AutogenTextureManager



//=========================================================================
//! @function    AutogenTextureManager::BindAutogenTexture
//! @brief       Bind an autogenerated texture to the renderer
//!				 UnbindAutogenTexture must be called when you are finished
//!				 using the autogen texture, otherwise it will be re-bound to the
//!				 the renderer when SetAutogenHandle is called
//!              
//! @param       stageID	[in] Texture stage ID to bind to
//! @param       textureID	[in] Autogen texture ID to bind. If there is no texture
//!								 associated with this ID, then a null handle will be bound
//!              
//! @return      true if succeded, false if failed
//=========================================================================
bool AutogenTextureManager::BindAutogenTexture ( ETextureStageID stageID, UInt textureID )
{
	m_bindings[stageID] = textureID;
	return m_renderer.Bind( GetAutogenHandle(textureID), stageID );
}
//End AutogenTextureManager::BindAutogenTexture



//=========================================================================
//! @function    AutogenTextureManager::UnbindAutogenTexture
//! @brief       Unbinds an autogenerated texture from a texture stage
//!				 
//!				 After this call, calls to SetAutogenHandle will have no
//!				 effect on the renderer, only on the AutogenTextureManager internal
//!				 map between textureIDs and textureHandles
//!
//!				 The actual texture bound to the renderer will not be changed.
//!				 It will stay the same until another texture is bound for that texture stage
//!              
//! @param       stageID [in]
//!              
//=========================================================================
void AutogenTextureManager::UnbindAutogenTexture ( ETextureStageID stageID )
{
	m_bindings[stageID] = 0;
}
//End AutogenTextureManager::UnbindAutogenTexture



//=========================================================================
//! @function    AutogenTextureManager::SetAutogenHandle
//! @brief       Set the texture handle associated with an integer texture ID
//!              
//!				 If the texture associated with that ID is currently bound to the renderer,
//!				 then new handle will be bound to the renderer instead
//!
//! @param       textureID [in]	Integer ID of the auto generated texture
//! @param       handle	   [in]	Handle to set the auto generated texture to
//!              
//=========================================================================
void AutogenTextureManager::SetAutogenHandle ( UInt textureID, HTexture handle )
{
	if ( textureID == 0 )
	{
		return;
	}

	m_textures[textureID] = handle;

	for ( UInt i=0; i < TEXTURE_STAGE_COUNT; ++i )
	{
		if ( m_bindings[i] == textureID )
		{
			m_renderer.Bind( GetAutogenHandle(textureID), static_cast<ETextureStageID>(i) );
		}
	}
}
//End AutogenTextureManager::SetAutogenHandle



//=========================================================================
//! @function    AutogenTextureManager::GetAutogenHandle
//! @brief       Get a handle to an autogen texture, from its ID
//!              
//!				 If there is no texture associated with the ID, then a
//!				 null handle will be returned
//!              
//! @param       textureID [in]
//!              
//! @return      A handle to the texture, or a null handle
//=========================================================================
HTexture AutogenTextureManager::GetAutogenHandle ( UInt textureID )
{
	if ( textureID == 0 )
	{
		return Core::NullHandle();
	}

	IDToTextureMapping::iterator current = m_textures.find(textureID);

	if ( current == m_textures.end() )
	{
		return Core::NullHandle();
	}
	else
	{
		return m_textures[textureID];
	}
}
//End AutogenTextureManager::GetAutogenHandle
