//======================================================================================
//! @file         Timer.h
//! @brief        Class to measure the passage of time
//!               
//!               
//!               
//! @author       Bryan Robertson
//! @date         Tuesday, 19 October 2004
//! @copyright    Bryan Robertson 2005
//
//				  This file is part of OidFX Engine.
//
//  			  OidFX Engine is free software; you can redistribute it and/or modify
//  			  it under the terms of the GNU General Public License as published by
//  			  the Free Software Foundation; either version 2 of the License, or
//  			  (at your option) any later version.
//
//  			  OidFX Engine is distributed in the hope that it will be useful,
//  			  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  			  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//  			  GNU General Public License for more details.
//
//  			  You should have received a copy of the GNU General Public License
//  			  along with OidFX Engine; if not, write to the Free Software
//  			  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
//
//======================================================================================

#ifndef CORE_TIMER_H
#define CORE_TIMER_H

#include <windows.h>
#include "Core/BasicTypes.h"
#include "Core/StandardExceptions.h"

//namespace Core
namespace Core
{

	//Makes it easier to switch from float to double if required
	typedef Double TimerValue;

	//! @class	Timer
	//! @brief	Class to measure the passage of time
	class Timer
	{
		public:

			//Constructors
			Timer ( ) throw (RuntimeError);

			//Update the timer
			inline TimerValue Update ( ) throw();
			//Get the time difference value generated by the last update
			inline TimerValue TimeDelta ( ) const throw();

			//Get the total time passed
			inline UInt64 Time() const throw();

			//Get the total time passed in seconds
			inline TimerValue TimeInSeconds() const throw();

		private:

			//Private methods
			inline TimerValue GetTime ( ) const throw();
			
			TimerValue m_cachedTimeDelta;
			TimerValue m_oldTime;
			TimerValue m_currentTime;
			TimerValue m_clockFrequency;
			UInt64	   m_oldTime64;
			UInt64	   m_currentTime64;
	};
	//end class Timer


	//==========================================================================
	//	Inline implementations
	//==========================================================================


    //=========================================================================
    //! @function    Timer::Update
    //! @brief       Update the in-game timer
    //!              
    //!              
    //! @return      Return the time elapsed since the last call to Update
    //=========================================================================
	TimerValue Timer::Update ( )
	{
			m_oldTime = m_currentTime;
			m_currentTime = GetTime();

			m_cachedTimeDelta = (m_currentTime - m_oldTime);

			return m_cachedTimeDelta;
	}
	//end Timer::Update


	//=========================================================================
    //! @function    Timer::TimeDelta
    //! @brief       Get the time delta value generated by the last update
    //!              
    //!              
    //! @return      The teme delta value generated by the last update
    //=========================================================================
	TimerValue Timer::TimeDelta ( ) const
	{
		return m_cachedTimeDelta;
	}
	//End Timer::TimeDelta


	//=========================================================================
    //! @function    Timer::Time
    //! @brief       Get the time value
	//!
	//!				 The units in which the time is stored is not defined
	//!				 This function merely provides a value which increases over time
	//!              
    //! @return      The total time passed
    //=========================================================================
	UInt64 Timer::Time () const
	{
		return m_currentTime64;
	}
	//End Timer::Time



	//=========================================================================
    //! @function    Timer::TimeInSeconds
    //! @brief       Return the timer value in seconds
    //!              
	//!				 Useful for applications which require some value which 
	//!				 increases with the passage of time
    //!              
    //! @return      The current timer value in seconds
    //=========================================================================
	TimerValue Timer::TimeInSeconds () const
	{
		return static_cast<TimerValue>(m_currentTime) / m_clockFrequency;
	}
	//End Timer::TimeInSeconds



    //=========================================================================
    //! @function    Timer::GetTime
    //! @brief       Get the current value of the timer from the operating system
    //!              
    //!              
    //! @return      The current timer value in seconds
    //=========================================================================
	TimerValue Timer::GetTime() const
	{
		LARGE_INTEGER performanceCount;
		QueryPerformanceCounter ( &performanceCount );

		return ((TimerValue)performanceCount.QuadPart ) / m_clockFrequency;
	}
	//end Timer::GetTime


};
//end namespace Core

#endif //CORE_TIMER_H